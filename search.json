[
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Content",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nMar 24, 2025\n\n\nWelcome and Introduction\n\n\n\n\nMar 24, 2025\n\n\nOpen Source and Git(Hub)\n\n\n\n\nMar 24, 2025\n\n\nFunctions\n\n\n\n\nMar 25, 2025\n\n\nClasses and Methods\n\n\n\n\nMar 25, 2025\n\n\nEfficient Programming\n\n\n\n\nMar 25, 2025\n\n\nProfiling\n\n\n\n\nMar 25, 2025\n\n\nC++ and Rcpp\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "join.html",
    "href": "join.html",
    "title": "Join the workshop",
    "section": "",
    "text": "Please sign up at https://warwick.ac.uk/ellakaye/r-programming-2025/.\nThe deadline to register interest is Sunday March 16th, 11:59pm. You will be informed if you have a place on Monday March 17th."
  },
  {
    "objectID": "content/05-efficient-programming/index.html",
    "href": "content/05-efficient-programming/index.html",
    "title": "Efficient Programming",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/05-efficient-programming/index.html#slides",
    "href": "content/05-efficient-programming/index.html#slides",
    "title": "Efficient Programming",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/05-efficient-programming/index.html#resources",
    "href": "content/05-efficient-programming/index.html#resources",
    "title": "Efficient Programming",
    "section": "Resources",
    "text": "Resources\n\nReading\nGood references on optimizing R code:\n\nWickham, H, Advanced R (2nd edn), Improving performance section, https://adv-r.hadley.nz/perf-improve.html\nGillespie, C and Lovelace, R, Efficient R programming, https://csgillespie.github.io/efficientR/\n\nTutorials on the Futureverse:\n\nhttps://www.futureverse.org/tutorials.html\n\n\n\nPackages\n\nefficient\nhttps://github.com/csgillespie/efficient\nfuture and future.apply from the Futureverse\nhttps://future.futureverse.org\nhttps://future.apply.futureverse.org"
  },
  {
    "objectID": "content/04-classes-methods/index.html",
    "href": "content/04-classes-methods/index.html",
    "title": "Classes and Methods",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-classes-methods/index.html#slides",
    "href": "content/04-classes-methods/index.html#slides",
    "title": "Classes and Methods",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-classes-methods/index.html#resources",
    "href": "content/04-classes-methods/index.html#resources",
    "title": "Classes and Methods",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nMain reference for this section, goes a bit further (including R6): Wickham, H, Advanced R (2nd edn), Object-oriented programming section\n\nhttps://adv-r.hadley.nz/oo.html\n\nFun example creating Turtle and TurtleWithPen classes to create simple graphics by moving the turtle\nhttps://stuartlee.org/2019/07/09/s4-short-guide/\n\n\n\nPackages\n\nsloop\nhttps://sloop.r-lib.org"
  },
  {
    "objectID": "content/07-r-with-cpp/index.html",
    "href": "content/07-r-with-cpp/index.html",
    "title": "C++ and Rcpp",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/07-r-with-cpp/index.html#slides",
    "href": "content/07-r-with-cpp/index.html#slides",
    "title": "C++ and Rcpp",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/07-r-with-cpp/index.html#resources",
    "href": "content/07-r-with-cpp/index.html#resources",
    "title": "C++ and Rcpp",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nSimilar scope to this module: Gillespie, C and Lovelace, R, Efficient R programming, Rcpp section\nhttps://csgillespie.github.io/efficientR/performance.html#rcpp\nGoing a bit further: Wickham, H, Advanced R (2nd edn), Rewriting R code in C++ chapter\nhttps://adv-r.hadley.nz/rcpp.html\nNot very polished, but broader coverage of Rcpp functionality: Tsuda, M.E., Rcpp for everyone\nhttps://teuder.github.io/rcpp4everyone_en/300_Rmath.html\nThe Rcpp vignettes, accessed via browseVignettes(\"Rcpp\") or CRAN\nThe unofficial Rcpp API documentation\nCase studies (optimising by improving R code and/or using C++)\n\nhttps://robotwealth.com/optimising-the-rsims-package-for-fast-backtesting-in-r/\nhttps://gallery.rcpp.org/articles/bayesian-time-series-changepoint/\nThe Rcpp Gallery has all sorts of examples, many illustrating advanced features of Rcpp).\n\n\n\n\nPackages\n\nRcpp\n\nhttps://www.rcpp.org\nhttps://github.com/RcppCore/Rcpp\nhttps://dirk.eddelbuettel.com/code/rcpp.html"
  },
  {
    "objectID": "content/02-github/index.html",
    "href": "content/02-github/index.html",
    "title": "Open Source and Git(Hub)",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-github/index.html#slides",
    "href": "content/02-github/index.html#slides",
    "title": "Open Source and Git(Hub)",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-github/index.html#resources",
    "href": "content/02-github/index.html#resources",
    "title": "Open Source and Git(Hub)",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nHappy Git and GitHub for the useR by Jenny Bryan\nhttp://happygitwithr.com\nGitHub for supporting, reusing, contributing and failing safely by Allison Horst and Julie Lowndes\nhttps://www.openscapes.org/blog/2022/05/27/github-illustrated-series/\nVersion control: A practical introduction to Git and GitHub\nhttps://www.jvcasillas.com/github_workshop/index.html#1\n\n\n\nPackages\n\nusethis\n\nhttps://usethis.r-lib.org\n\ngert\n\nhttps://docs.ropensci.org/gert"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#overview",
    "href": "slides/05-efficient-programming/index.html#overview",
    "title": "Efficient Programming",
    "section": "Overview",
    "text": "Overview\n\nMemory management\nBenchmarking\nImproving run time\nParallelisation\nOutlook to package development"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#overview-1",
    "href": "slides/05-efficient-programming/index.html#overview-1",
    "title": "Efficient Programming",
    "section": "Overview",
    "text": "Overview\nObjects created in R are stored in memory. This has the advantage that objects can be accessed faster, but R slows down as the memory fills up. Creating objects also takes time.\nTherefore:\n\n\nRe-use temporary variables. The allocated storage will be re-used if the vector has the same length.\nSave results for re-use, e.g. index variables\nDon’t save intermediate results unnecessarily – compute on-the-fly\nRemove large objects when no longer needed (with rm())"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#basic-data-structures",
    "href": "slides/05-efficient-programming/index.html#basic-data-structures",
    "title": "Efficient Programming",
    "section": "Basic data structures",
    "text": "Basic data structures\nTry to use the simplest data structure for your purpose\n\nmatrices vs. data frames\ncharacter or integer vectors vs. factors\nlogical or integer vectors vs. numeric vectors\nunnamed objects vs. named objects\n\n\nIt is especially important to use low-level structures for computation\nYou can create richer objects as a final step before returning to the user.\n\nL for integer"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#big-data",
    "href": "slides/05-efficient-programming/index.html#big-data",
    "title": "Efficient Programming",
    "section": "Big Data",
    "text": "Big Data\nModern computers have enough RAM to work with millions of records using standard functions.\nSome packages to work more efficiently with big data:\n\ndata.table faster operations on data frames; read/write large CSVs\ndplyr + dbplyr processing of data in databases.\narrow read/write large CSVs or binary files e.g. Parquet; processing larger-than-memory data with dplyr commands.\nbigmemory, biganalytics faster matrix operations, generalized linear models, kmeans\n\n\nN.B. sparse matrices not as efficient as you might expect for general programming, may need big data for it to be important.\nParallelisation can also help, see later"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#growing-objects",
    "href": "slides/05-efficient-programming/index.html#growing-objects",
    "title": "Efficient Programming",
    "section": "Growing Objects",
    "text": "Growing Objects\nAdding to an object in a loop\n\nres &lt;- NULL\nfor (i in 1:5000) res &lt;- c(res, 1)\n\nmay force a copy to be made at each iteration, with each copy stored until the loop has completed.\n\nIt is far better to create an object of the necessary size first\n\nres &lt;- numeric(5000)\nfor (i in seq_along(res)) res[i] &lt;- 1\n\n\n\nTo initialise a list we can use\n\nres &lt;- vector(mode = \"list\", length = 100)"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#copy-on-change",
    "href": "slides/05-efficient-programming/index.html#copy-on-change",
    "title": "Efficient Programming",
    "section": "Copy-on-Change",
    "text": "Copy-on-Change\nR usually copies an object to make changes to it.\ntracemem can be used to trace copies of an object\n\nz &lt;- NULL\nfor (i in 1:3) { \n  z &lt;- c(z,1)\n  print(tracemem(z)) \n}\n\n[1] \"&lt;0x122220648&gt;\"\n[1] \"&lt;0x11940ba08&gt;\"\n[1] \"&lt;0x127b9b9c8&gt;\""
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#copy-on-change-pre-allocated",
    "href": "slides/05-efficient-programming/index.html#copy-on-change-pre-allocated",
    "title": "Efficient Programming",
    "section": "Copy-on-change (pre-allocated)",
    "text": "Copy-on-change (pre-allocated)\n\nz &lt;- numeric(2)\nprint(tracemem(z))\n\n[1] \"&lt;0x167fb48c8&gt;\"\n\n\nfor (i in 1:2) {\n  z[i] &lt;- i\n  print(tracemem(z)) \n}\n\ntracemem[0x167fb48c8 -&gt; 0x167fa90c8]: \n[1] \"&lt;0x167fa90c8&gt;\"\n[1] \"&lt;0x167fa90c8&gt;\"\n\nmakes copy for each separate block of code e.g. if run with above in one go interactively no copies if run in separate chunks 1 copy"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#benchmarking-1",
    "href": "slides/05-efficient-programming/index.html#benchmarking-1",
    "title": "Efficient Programming",
    "section": "Benchmarking",
    "text": "Benchmarking\nThere will usually be many ways to write code for a given task. To compare alternatives, we can use benchmark the code.\nIf the code is more than a single expression, create wrappers for each alternative\n\ngrow &lt;- function(n){\n  res &lt;- NULL\n  for (i in 1:n) res &lt;- c(res, 1)\n  res\n}\npre_specify &lt;- function(n){\n  res &lt;- numeric(n)\n  for (i in seq_along(res)) res[i] &lt;- 1\n  res\n}"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#benchmark",
    "href": "slides/05-efficient-programming/index.html#benchmark",
    "title": "Efficient Programming",
    "section": "bench::mark()",
    "text": "bench::mark()\nRun the two alternatives with bench::mark(). This function\n\nRuns alternatives ≥ 1 time; at most enough times to take 0.5s\nMakes sure the two expressions return the same result!\n\n\n\nlibrary(bench)\n(bm &lt;- bench::mark(grow(5000), pre_specify(5000)))\n\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n\n\n# A tibble: 2 × 6\n  expression             min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt;        &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 grow(5000)          26.9ms   29.8ms      33.1    95.6MB    60.4 \n2 pre_specify(5000)  100.3µs  108.4µs    8889.     55.7KB     8.00\n\n\n\nGC is the garbage collector which tidies up deleted objects\nitr/sec is how many times the expression could be run in 1s"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#plotting-benchmarks",
    "href": "slides/05-efficient-programming/index.html#plotting-benchmarks",
    "title": "Efficient Programming",
    "section": "Plotting benchmarks",
    "text": "Plotting benchmarks\nDistribution tends to be right-skewed - focus on the median!\n\nplot(bm)"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#scaling",
    "href": "slides/05-efficient-programming/index.html#scaling",
    "title": "Efficient Programming",
    "section": "Scaling",
    "text": "Scaling\nBenchmarking can be difficult as the best option can depend on the size of the data, e.g. memory allocation can overshadow run time for small objects.\nWhen thinking about how our code scales to bigger, we need to consider what we mean by “big”\n\nnumber of rows or number of columns?\nnumber of observations or number of factor levels?\n\nbench::press() compares a function over a grid of parameters"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#benchpress",
    "href": "slides/05-efficient-programming/index.html#benchpress",
    "title": "Efficient Programming",
    "section": "bench::press()",
    "text": "bench::press()\n\n\nbench::press(n = c(10, 100, 1000), k = c(100, 10, 1),\n  bench::mark(gl(n, k, length = 1000)) # `gl` generates factor levels\n)\n\n# A tibble: 9 × 8\n  expression              n     k      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 gl(n, k, length = …    10   100   6.31µs   7.22µs   132845.   15.91KB     13.3\n2 gl(n, k, length = …   100   100  40.18µs  45.22µs    21975.    46.2KB     21.8\n3 gl(n, k, length = …  1000   100 407.13µs 450.57µs     2229.  422.34KB     21.6\n4 gl(n, k, length = …    10    10   3.24µs   3.73µs   256855.    4.39KB     25.7\n5 gl(n, k, length = …   100    10   9.43µs  10.46µs    91904.   11.05KB     18.4\n6 gl(n, k, length = …  1000    10 102.58µs 112.55µs     8879.   70.78KB     12.7\n7 gl(n, k, length = …    10     1   2.99µs   3.32µs   284092.    3.95KB     28.4\n8 gl(n, k, length = …   100     1   6.44µs   7.05µs   134715.    7.53KB     26.9\n9 gl(n, k, length = …  1000     1  72.65µs  76.22µs    12946.   35.62KB     10.4\n\n\n\n\nn: an integer giving the number of levels.\nk: an integer giving the number of replications.\nLittle difference when increasing k for a given n Bigger difference when increasing n for a given k"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#exercise-1",
    "href": "slides/05-efficient-programming/index.html#exercise-1",
    "title": "Efficient Programming",
    "section": "Exercise 1",
    "text": "Exercise 1\nSuppose we have a matrix of data and a two-level factor\n\nnr &lt;- 10\nnc &lt;- 50\nX &lt;- matrix(rnorm(nr * nc, 10, 3), nrow = nr)\ngrp &lt;- gl(2, nc/2)\n\nUse bench::mark() to compare the following ways to find the coefficients of a linear model fitted to each row\n\n# one\nres &lt;- vector(\"list\", nr)\nfor(i in seq_len(nr)){\n  res[[i]] &lt;- coef(lm(X[i,] ~ grp))\n}\ndo.call(\"cbind\", res)\n# two\nres2 &lt;- coef(lm(t(X) ~ grp))"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#faster-common-operations",
    "href": "slides/05-efficient-programming/index.html#faster-common-operations",
    "title": "Efficient Programming",
    "section": "Faster common operations",
    "text": "Faster common operations\n\nSorting\n\nUse sort(x, partial = 1:10) to get the top 10\nUse sort(x, decreasing = TRUE) vs rev(sort(x))\n\n\n\n\nGenerating numeric vectors\n\nseq.int(), seq_along(x), seq_len(n) vs seq()\n\nrep.int() or rep_len(n) vs rep()\n\n\n\n\n\nwhich.min(), which.max() vs e.g. which(x == min(x))\n\n\n\n\nanyNA(x) vs any(is.na(x))\n\n\n“int” stands for internal!"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#for-loops",
    "href": "slides/05-efficient-programming/index.html#for-loops",
    "title": "Efficient Programming",
    "section": "For loops",
    "text": "For loops\nFor loops are an intuitive way to write code, but can be very inefficient.\nfor is a function, : or seq_along is another function, each use of [ is a call to a function, …, so a loop involves many nested function calls.\n\nTry to keep for loops for truly iterative computations or tasks that are fast in any case (optimizing code takes time!)\nOtherwise make loops as lean as possible, by pre-computing values that do not need be be computed iteratively."
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#vectorization",
    "href": "slides/05-efficient-programming/index.html#vectorization",
    "title": "Efficient Programming",
    "section": "Vectorization",
    "text": "Vectorization\nVectorization is operating on vectors (or vector-like objects) rather than individual elements.\nMany operations in R are vectorized, e.g.\n\nx &lt;- 1:3\ny &lt;- 3:1\nx == y\n\n[1] FALSE  TRUE FALSE\n\nlog(x)\n\n[1] 0.0000000 0.6931472 1.0986123\n\nres &lt;- list(a = 1:3, b = 1:6)\nlengths(res)\n\na b \n3 6 \n\n\nWe do not need to loop through each element!"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#recycling",
    "href": "slides/05-efficient-programming/index.html#recycling",
    "title": "Efficient Programming",
    "section": "Recycling",
    "text": "Recycling\nVectorized functions will recycle shorter vectors to create vectors of the same length\n\n1:4 + 0:1 + 2 # 1+0+2, 2+1+2, 3+0+2, 4+1+2\n\n[1] 3 5 5 7\n\n\nThis is particularly useful for single values\n\ncbind(1, 3:4)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    1    4\n\n\nand for generating regular patterns\n\npaste0(rep(1:3, each = 2), c(\"a\", \"b\"))\n\n[1] \"1a\" \"1b\" \"2a\" \"2b\" \"3a\" \"3b\""
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#ifelse",
    "href": "slides/05-efficient-programming/index.html#ifelse",
    "title": "Efficient Programming",
    "section": "ifelse()",
    "text": "ifelse()\nifelse is a vectorised version of if and else blocks\n\nx &lt;- c(5, 2, 9, 12)\nifelse(x &lt; 6, 2 * x, 3 * x)\n\n[1] 10  4 27 36\n\n\nRecycling is also very useful here\n\nx &lt;- 1:10\nifelse(x %% 2 == 0, 5, 12)\n\n [1] 12  5 12  5 12  5 12  5 12  5\n\n\nHowever indexing is more efficient than ifelse\n\ny &lt;- rep.int(12, 10)\ny[x %% 2 == 0] &lt;- 5\ny\n\n [1] 12  5 12  5 12  5 12  5 12  5"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#logical-operations",
    "href": "slides/05-efficient-programming/index.html#logical-operations",
    "title": "Efficient Programming",
    "section": "Logical operations",
    "text": "Logical operations\nLogical operators such as & and | are vectorized, e.g.\n\nx &lt;- c(0.3, 1, 0.6, 1.2, 0.4, 0.5)\nx &gt; 0.4 & x &lt; 0.8\n\n[1] FALSE FALSE  TRUE FALSE FALSE  TRUE\n\n\nIf we only want to compare vectors of length 1 the operators && and || are more efficient as they only compute the RHS if needed\n\nx[1] &gt; 0.4 && x[1] &lt; 0.8\n\n[1] FALSE\n\n\nMake sure the vectors are of length 1, otherwise you get an error. This change was introduced in R ≥ 4.3.\n\nx &gt; 0.4 && x &lt; 0.8\n\nError in x &gt; 0.4 && x &lt; 0.8: 'length = 6' in coercion to 'logical(1)'\n\n\n\nIn R &ge 4.2.0 you get a warning but it still returns a comparison of only the first element. In earlier versions, there was no warning."
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#vectorization-and-matrices",
    "href": "slides/05-efficient-programming/index.html#vectorization-and-matrices",
    "title": "Efficient Programming",
    "section": "Vectorization and Matrices",
    "text": "Vectorization and Matrices\nVectorizations applies to matices too, not only through matrix algebra\n\nM &lt;- matrix(1:4, nrow = 2, ncol = 2)\nM + M\n\n     [,1] [,2]\n[1,]    2    6\n[2,]    4    8\n\n\nbut also vectorized functions\n\nM &lt;- M + rep(1.3, 4)\nround(M)\n\n     [,1] [,2]\n[1,]    2    4\n[2,]    3    5"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#matrices-and-recycling-rows",
    "href": "slides/05-efficient-programming/index.html#matrices-and-recycling-rows",
    "title": "Efficient Programming",
    "section": "Matrices and recycling: rows",
    "text": "Matrices and recycling: rows\nValues are recycled down matrix, which is convenient for row-wise operations\n\nM &lt;- matrix(1:6, nrow = 2, ncol = 3)\nM\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nM - 1:2\n\n     [,1] [,2] [,3]\n[1,]    0    2    4\n[2,]    0    2    4"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#matrices-and-recycling-columns",
    "href": "slides/05-efficient-programming/index.html#matrices-and-recycling-columns",
    "title": "Efficient Programming",
    "section": "Matrices and recycling: columns",
    "text": "Matrices and recycling: columns\nTo do the same for columns we would need to explicitly replicate, which is not so efficient.\n\nM - rep(1:3, each = 2)\n\n     [,1] [,2] [,3]\n[1,]    0    1    2\n[2,]    1    2    3"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#apply",
    "href": "slides/05-efficient-programming/index.html#apply",
    "title": "Efficient Programming",
    "section": "apply()",
    "text": "apply()\napply provides a way to apply a function to every row or column of a matrix\n\nM &lt;- matrix(1:20, 2, 10)\nM\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]    1    3    5    7    9   11   13   15   17    19\n[2,]    2    4    6    8   10   12   14   16   18    20\n\n# MARGIN 1 over rows\napply(M, 1, quantile, 0.75)\n\n[1] 14.5 15.5\n\n# MARGIN 2 over columns\napply(M, 2, mean)\n\n [1]  1.5  3.5  5.5  7.5  9.5 11.5 13.5 15.5 17.5 19.5"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#lapply",
    "href": "slides/05-efficient-programming/index.html#lapply",
    "title": "Efficient Programming",
    "section": "lapply()",
    "text": "lapply()\nlapply applies a given function to each element of a list\n\nl &lt;- list()\nl$x &lt;- 1:3\nl$y &lt;- 4:6\nlapply(l, mean)\n\n$x\n[1] 2\n\n$y\n[1] 5"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#sapply-and-vapply",
    "href": "slides/05-efficient-programming/index.html#sapply-and-vapply",
    "title": "Efficient Programming",
    "section": "sapply() and vapply()",
    "text": "sapply() and vapply()\nsapply acts similarly to lapply, but tries to simplify the result\n\nsapply(l, mean)\n\nx y \n2 5 \n\n\nIt is better to use vapply() in programming as it ensures the returned object is of the expected type (and is slightly faster)\n\nvapply(l, mean, numeric(1))\n\nx y \n2 5"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#rowcolumn-wise-operations",
    "href": "slides/05-efficient-programming/index.html#rowcolumn-wise-operations",
    "title": "Efficient Programming",
    "section": "Row/Column-wise Operations",
    "text": "Row/Column-wise Operations\nSeveral functions are available implementing efficient row/column-wise operations, e.g. colMeans(), rowMeans(), colSums(), rowSums(), sweep()\n\nM &lt;- matrix(1:4, nrow = 2, ncol = 2)\nrowMeans(M)\n\n[1] 2 3\n\n\nThese provide an alternative to iterating though rows and columns in R (the iteration happens in C, which is faster).\nThe matrixStats provides further “matricised” methods, including medians and standard deviations."
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#exercise-2-ht-raju-bhakta",
    "href": "slides/05-efficient-programming/index.html#exercise-2-ht-raju-bhakta",
    "title": "Efficient Programming",
    "section": "Exercise 2 (h/t Raju Bhakta)",
    "text": "Exercise 2 (h/t Raju Bhakta)\nSampling from 0.3 × N(0, 1) + 0.5 × N(10, 1) + 0.2 × N(3, 0.1):\n\n# Set the random seed and the number of values to sample\nset.seed(1); n &lt;- 100000                 \n\n# Sample the component each value belongs to\ncomponent &lt;- sample(1:3, prob = c(0.3, 0.5, 0.2), \n                    size = n, replace = TRUE)\n\n# Sample from the corresponding Normal for each value\nx &lt;- numeric(n)\nfor(i in seq_len(n)){\n  if (component[i] == 1){\n    x[i] &lt;- rnorm(1, 0, 1)\n  } else if (component[i] == 2) {\n    x[i] &lt;- rnorm(1, 10, 1)\n  } else {\n    x[i] &lt;- rnorm(1, 3, sqrt(0.1))\n  }\n}"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#exercise-2-continued",
    "href": "slides/05-efficient-programming/index.html#exercise-2-continued",
    "title": "Efficient Programming",
    "section": "Exercise 2 (continued)",
    "text": "Exercise 2 (continued)\nThe for loop in the previous code is suitable for vectorization: the iterations are completely independent.\nrnorm() is vectorized in the arguments mu and sd, e.g. to simulate a value from the 1st and 3rd component we could write:\n\nmu &lt;- c(0, 10, 3)\nsd &lt;- sqrt(c(1, 1, 0.1))\nrnorm(2, mu[c(1, 3)], sd[c(1, 3)])\n\n[1] -0.7286473  2.6902506\n\n\nUse this information to replace the for loop, using a single call to rnorm() to simulate n values from the mixture distribution.\nUse bench::mark() to compare the two approaches - don’t forget to set the same seed so the simulations are equivalent!"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#parallelisation-1",
    "href": "slides/05-efficient-programming/index.html#parallelisation-1",
    "title": "Efficient Programming",
    "section": "Parallelisation",
    "text": "Parallelisation\nMost functions in R run on a single core of your machine. The future.apply package, part of the futureverse, provides parallel versions of all the apply-type functions.\nhttps://www.futureverse.org\nParallelisation is most straight-forward to implement for embarrassingly parallel problems, such as applying a function to elements of a list."
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#example-setup",
    "href": "slides/05-efficient-programming/index.html#example-setup",
    "title": "Efficient Programming",
    "section": "Example setup",
    "text": "Example setup\nAdapted from https://henrikbengtsson.github.io/course-stanford-futureverse-2023/\nLet’s create a slow function:\n\nslow_sum &lt;- function(x) {\n  sum &lt;- 0\n  \n  for (value in x) {\n    Sys.sleep(0.5)  ## half-second slowdown per value\n    sum &lt;- sum + value\n  }\n  \n  sum\n}\n\n\nlibrary(tictoc)\ntic()\ny &lt;- slow_sum(1:10)\ntoc()\n\n5.05 sec elapsed"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#parallelising-map-reduce-calls",
    "href": "slides/05-efficient-programming/index.html#parallelising-map-reduce-calls",
    "title": "Efficient Programming",
    "section": "Parallelising map-reduce calls",
    "text": "Parallelising map-reduce calls\nNow suppose we have four sets of numeric vectors, in a list, and we want to calculate slow_sum() for each:\n\nxs &lt;- list(1:10, 11:20, 21:30, 31:40)\n\nWe could run lapply() over this, but it takes a while as it handles each list item in turn:\n\ntic()\nys &lt;- lapply(xs, slow_sum)\ntoc()\n\n20.175 sec elapsed"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#setting-up-for-parallel-processing",
    "href": "slides/05-efficient-programming/index.html#setting-up-for-parallel-processing",
    "title": "Efficient Programming",
    "section": "Setting up for parallel processing",
    "text": "Setting up for parallel processing\nThe future.apply package comes to the rescue!\nThe first step is to make a cluster from the available cores.\nTo parallelise on a local machine, use multisession in plan():\n\nlibrary(future.apply)\nplan(multisession)\n\nThe default number of workers is availableCores().\nWe’ll also use the tictoc package for timings:\n\nlibrary(tictoc)"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#using-future_lapply",
    "href": "slides/05-efficient-programming/index.html#using-future_lapply",
    "title": "Efficient Programming",
    "section": "Using future_lapply()",
    "text": "Using future_lapply()\nfuture_lapply() is a drop-in parallel replacement for lapply()\n\nplan(multisession, workers = 4)\n\n\ntic()\nys &lt;- future_lapply(xs, slow_sum)\ntoc()\n\n5.246 sec elapsed\n\n\nThe four slow sums are calculated in about the same time as it takes to calculate one, since they are being calculated simultaneously on separate cores."
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#your-turn",
    "href": "slides/05-efficient-programming/index.html#your-turn",
    "title": "Efficient Programming",
    "section": "Your turn!",
    "text": "Your turn!\nThe efficient package contains a function to simulate a game of snakes and ladders, returning the number of rolls required to win.\n\nremotes::install_github(\"csgillespie/efficient\",\n                         INSTALL_opts = \"--with-keep.source\")\n\nParallelise the following code:\n\nlibrary(efficient)\nN &lt;- 100\nnrolls &lt;- sapply(seq_len(N), snakes_ladders)\n\nUse tictoc to compare the run-times. Roughly how large does N have to be for the parallel version to be worth using?\n\n“–with-keep.source” as this is needed for profiling in next session"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#general-principles",
    "href": "slides/05-efficient-programming/index.html#general-principles",
    "title": "Efficient Programming",
    "section": "General Principles",
    "text": "General Principles\n\nTry to use vectorized functions where possible.\nOtherwise use the apply family (and parellelise if necessary). Custom functions will often be useful here to pass to apply etc.\nTry to keep for loops for true iterative computations or tasks that are fast in any case (optimizing code takes time!)"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#references",
    "href": "slides/05-efficient-programming/index.html#references",
    "title": "Efficient Programming",
    "section": "References",
    "text": "References\nGood references on optimizing R code:\n\nWickham, H, Advanced R (2nd edn), Improving performance section, https://adv-r.hadley.nz/perf-improve.html\nGillespie, C and Lovelace, R, Efficient R programming, https://csgillespie.github.io/efficientR/\n\nTutorials on the Futureverse:\n\nhttps://www.futureverse.org/tutorials.html"
  },
  {
    "objectID": "slides/05-efficient-programming/index.html#license",
    "href": "slides/05-efficient-programming/index.html#license",
    "title": "Efficient Programming",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#overview",
    "href": "slides/04-classes-methods/index.html#overview",
    "title": "Classes and Methods",
    "section": "Overview",
    "text": "Overview\n\nObject-oriented programming\nS3\nOther OOP systems (S4, R6, S7)"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#source-material",
    "href": "slides/04-classes-methods/index.html#source-material",
    "title": "Classes and Methods",
    "section": "Source material",
    "text": "Source material\nThis material is largely based on Chapters 12 and 13 of Advanced R, 2nd edition, by Hadley Wickham.\nThe book is freely available online: https://adv-r.hadley.nz.\nIt is shared under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#object-oriented-programming-oop",
    "href": "slides/04-classes-methods/index.html#object-oriented-programming-oop",
    "title": "Classes and Methods",
    "section": "Object-oriented programming (OOP)",
    "text": "Object-oriented programming (OOP)\nWith OOP, a developer can consider a function’s interface separately from its implementation.\nThis makes it possible to use the same function for different types of input.\nThese are called generic functions."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#oop-definitions",
    "href": "slides/04-classes-methods/index.html#oop-definitions",
    "title": "Classes and Methods",
    "section": "OOP definitions",
    "text": "OOP definitions\n\nOO systems call the type of an object its class.\nAn implementation for a specific class is called a method.\nThe class defines the fields, the data possessed by every instance of that class.\n\n\n\n\n\n\n\n\nTip\n\n\nRoughly speaking, a class defines what an object is and methods define what an object can do."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#oop-definitions-continued",
    "href": "slides/04-classes-methods/index.html#oop-definitions-continued",
    "title": "Classes and Methods",
    "section": "OOP definitions (continued)",
    "text": "OOP definitions (continued)\n\nClasses are organised in a hierarchy, so that if a method does not exist for one class, its parent’s method is used.\nThe child is said to inherit behaviour.\nThe process of finding the correct method given a class is called method dispatch."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#generic-functions",
    "href": "slides/04-classes-methods/index.html#generic-functions",
    "title": "Classes and Methods",
    "section": "Generic functions",
    "text": "Generic functions\nGeneric functions provide a unified interface to methods for objects of a particular class, e.g.\n\nlibrary(palmerpenguins)\n\n\nsummary(penguins$species)\n\n   Adelie Chinstrap    Gentoo \n      152        68       124 \n\nsummary(penguins$flipper_length_mm)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n    172     190     197     201     213     231       2 \n\n\nHere, we use the same function, summary(), on objects of classes factor and integer and get different output for each."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#motivation-for-oop",
    "href": "slides/04-classes-methods/index.html#motivation-for-oop",
    "title": "Classes and Methods",
    "section": "Motivation for OOP",
    "text": "Motivation for OOP\nsummary() could contain several if-else statements, but\n\nthe code would become hard to follow\nonly the function authors (R Core) could add new implementations"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#what-does-oop-offer",
    "href": "slides/04-classes-methods/index.html#what-does-oop-offer",
    "title": "Classes and Methods",
    "section": "What does OOP offer?",
    "text": "What does OOP offer?\n\nseparates the code for different data types\navoids duplicating code by method inheritance from parent class(es) to child class (subclass)\nmakes it possible for external developers to add methods for new types of object\n\nthis can be particularly useful when writing R packages"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#oop-systems-in-r",
    "href": "slides/04-classes-methods/index.html#oop-systems-in-r",
    "title": "Classes and Methods",
    "section": "OOP Systems in R",
    "text": "OOP Systems in R\nThere are 3 main OOP systems in use:\n\n\nS3\n\nUsed in base R and most recommended/CRAN packages\nUse unless you have good reason not to\n\nS4\n\nUsed on Bioconductor\nAllow more complex relationships between classes and methods\n\nR6\n\nMore similar to OOP in other languages\nMay prefer if S3 insufficient and not aiming for Bioconductor\n\n\nA new OOP system, S7, is in development as a successor to S3 and S4.\n\n\nR6 v similar to Python OOP (also Java, C++) Julia not an OOP language, but does have concept of multiple dispatch - so maybe a bit more like S3 idea?"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#sloop",
    "href": "slides/04-classes-methods/index.html#sloop",
    "title": "Classes and Methods",
    "section": "sloop",
    "text": "sloop\nThe sloop package provides tools to help you interactively explore and understand object oriented programming in R, particularly with S3.\n\nlibrary(sloop)"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#objects",
    "href": "slides/04-classes-methods/index.html#objects",
    "title": "Classes and Methods",
    "section": "Objects",
    "text": "Objects\nIn R, we can distinguish between base objects and OO objects.\nA base object:\n\nis.object(1:10)\n\n[1] FALSE\n\nsloop::otype(1:10)\n\n[1] \"base\"\n\n\nAn OO object:\n\nis.object(penguins)\n\n[1] TRUE\n\nsloop::otype(penguins)\n\n[1] \"S3\"\n\n\n\nEverything in R is an object, but not everything is object-oriented."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#classes",
    "href": "slides/04-classes-methods/index.html#classes",
    "title": "Classes and Methods",
    "section": "Classes",
    "text": "Classes\nTechincally, the difference between base and OO objects is that OO objects have a class attribute:\n\nattr(1:10, \"class\")\n\nNULL\n\nattr(penguins, \"class\")\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nsloop::s3_class(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "slides/04-classes-methods/index.html#base-types",
    "href": "slides/04-classes-methods/index.html#base-types",
    "title": "Classes and Methods",
    "section": "Base types",
    "text": "Base types\nOnly OO objects have a class attribute, but every object has a base type.\nThere are 25 different base types, e.g.\n\ntypeof(NULL)\n\n[1] \"NULL\"\n\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(\"hello\")\n\n[1] \"character\""
  },
  {
    "objectID": "slides/04-classes-methods/index.html#object-of-type-closure-is-not-subsettable",
    "href": "slides/04-classes-methods/index.html#object-of-type-closure-is-not-subsettable",
    "title": "Classes and Methods",
    "section": "“object of type ‘closure’ is not subsettable”",
    "text": "“object of type ‘closure’ is not subsettable”\n\ntypeof(mean)\n\n[1] \"closure\"\n\nmean[1]\n\nError in mean[1]: object of type 'closure' is not subsettable\n\n\n\nJenny Bryan’s talk on debugging:\nhttps://posit.co/resources/videos/object-of-type-closure-is-not-subsettable/"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s3-objects",
    "href": "slides/04-classes-methods/index.html#s3-objects",
    "title": "Classes and Methods",
    "section": "S3 objects",
    "text": "S3 objects\nAn S3 object has a \"class\" attribute:\n\nattr(penguins$species, \"class\")\n\n[1] \"factor\"\n\nunique(penguins$species)\n\n[1] Adelie    Gentoo    Chinstrap\nLevels: Adelie Chinstrap Gentoo"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s3-objects-the-underlying-object",
    "href": "slides/04-classes-methods/index.html#s3-objects-the-underlying-object",
    "title": "Classes and Methods",
    "section": "S3 objects: the underlying object",
    "text": "S3 objects: the underlying object\nWith unclass() we obtain the underlying object, its base type, here an integer vector\n\nspecies_no_class &lt;- unclass(penguins$species)\nclass(species_no_class)\n\n[1] \"integer\"\n\nunique(species_no_class)\n\n[1] 1 3 2\n\nattributes(species_no_class)\n\n$levels\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\""
  },
  {
    "objectID": "slides/04-classes-methods/index.html#oo-type-vs-base-type-when-passed-to-generic",
    "href": "slides/04-classes-methods/index.html#oo-type-vs-base-type-when-passed-to-generic",
    "title": "Classes and Methods",
    "section": "OO type vs base type when passed to generic",
    "text": "OO type vs base type when passed to generic\n\nf &lt;- factor(c(\"a\", \"b\", \"c\"))\nprint(f)\n\n[1] a b c\nLevels: a b c\n\nprint(unclass(f))\n\n[1] 1 2 3\nattr(,\"levels\")\n[1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "slides/04-classes-methods/index.html#generic-as-middleman",
    "href": "slides/04-classes-methods/index.html#generic-as-middleman",
    "title": "Classes and Methods",
    "section": "generic as middleman",
    "text": "generic as middleman\n\nThe generic is the middleman: its job is to define the interface (i.e. the arguments) then find the right implementation for the job. The implementation for a specific class is called a method, and the generic finds that method by performing method dispatch.\n\nHadley Wickham, Advanced R (2e)"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#naming-scheme",
    "href": "slides/04-classes-methods/index.html#naming-scheme",
    "title": "Classes and Methods",
    "section": "Naming scheme",
    "text": "Naming scheme\nS3 methods are functions with a special naming scheme, generic.class(). For example, the factor method for the print() generic is called print.factor().\nYou should never call the method directly, but instead rely on the generic to find it for you.\n\n\n\n\n\n\n\nTip\n\n\nThis is why it is not considered best practice to use . when naming your own functions.\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nLots of important R functions that are not methods do have . in the title – these are from before S3.\n\n\n\n\ne.g. data.frame() row.names()"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#creating-oo-objects",
    "href": "slides/04-classes-methods/index.html#creating-oo-objects",
    "title": "Classes and Methods",
    "section": "Creating OO objects",
    "text": "Creating OO objects\nTo make an object an instance of a class, you simply set the class attribute.\n(S3 has no formal definition of a class)."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#creating-an-s3-object-with-stucture",
    "href": "slides/04-classes-methods/index.html#creating-an-s3-object-with-stucture",
    "title": "Classes and Methods",
    "section": "Creating an S3 object with stucture()",
    "text": "Creating an S3 object with stucture()\nYou can use structure() to define an S3 object with a class attribute:\n\ndp &lt;- 2\nstructure(list(pi = trunc(10^dp * pi)/10^dp, dp = dp),\n          class = \"pi_trunc\")\n\n$pi\n[1] 3.14\n\n$dp\n[1] 2\n\nattr(,\"class\")\n[1] \"pi_trunc\"\n\n\nPotentially further attributes can be added at the same time, but typically we would use a list to return all the required values."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#creating-an-s3-object-with-class",
    "href": "slides/04-classes-methods/index.html#creating-an-s3-object-with-class",
    "title": "Classes and Methods",
    "section": "Creating an S3 object with class()",
    "text": "Creating an S3 object with class()\nAlternatively, we can add a class attribute using the class() helper function:\n\npi2dp &lt;- list(pi = trunc(10^dp * pi)/10^dp, dp = dp)\nclass(pi2dp) &lt;- \"pi_trunc\"\npi2dp\n\n$pi\n[1] 3.14\n\n$dp\n[1] 2\n\nattr(,\"class\")\n[1] \"pi_trunc\""
  },
  {
    "objectID": "slides/04-classes-methods/index.html#creating-your-own-classes",
    "href": "slides/04-classes-methods/index.html#creating-your-own-classes",
    "title": "Classes and Methods",
    "section": "Creating your own classes",
    "text": "Creating your own classes\nAll objects of the same class should have the same structure, i.e. same base type and same attributes.\nRecommend that you create:\n\na low-level constructor, new_myclass(), that efficiently creates objects with the correct structure\nA validator, validate_myclass() that performs more computationally expensive checks to ensure the object has correct values\nA user-friendly helper, myclass(), that provides a convenient way for others to create objects of your class.\n\nSee https://adv-r.hadley.nz/s3.html#s3-classes for more details."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#print-generic",
    "href": "slides/04-classes-methods/index.html#print-generic",
    "title": "Classes and Methods",
    "section": "print generic",
    "text": "print generic\n\nprint(pi2dp)\n\n$pi\n[1] 3.14\n\n$dp\n[1] 2\n\nattr(,\"class\")\n[1] \"pi_trunc\"\n\n\n\nSee what happens before we define a custom print method later\nPrints like a list along with the attribute"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s3-generic-functions",
    "href": "slides/04-classes-methods/index.html#s3-generic-functions",
    "title": "Classes and Methods",
    "section": "S3 generic functions",
    "text": "S3 generic functions\nS3 generic functions are simple wrappers to UseMethod()\n\nprint\n\nfunction (x, ...) \nUseMethod(\"print\")\n&lt;bytecode: 0x12abe8328&gt;\n&lt;environment: namespace:base&gt;"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#usemethod",
    "href": "slides/04-classes-methods/index.html#usemethod",
    "title": "Classes and Methods",
    "section": "useMethod()",
    "text": "useMethod()\nThe UseMethod() function takes care of method dispatch: selecting the S3 method according to the class of the object passed as the first argument.\n\nclass(penguins$species[1:3])\n\n[1] \"factor\"\n\nprint(penguins$species[1:3])\n\n[1] Adelie Adelie Adelie\nLevels: Adelie Chinstrap Gentoo\n\n\nHere print() dispatches to the method print.factor()."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s3_dispatch",
    "href": "slides/04-classes-methods/index.html#s3_dispatch",
    "title": "Classes and Methods",
    "section": "s3_dispatch()",
    "text": "s3_dispatch()\nUseMethod() creates a vector of method names then looks for each potential method in turn. We can see this with sloop::s3_dispatch():\n\ns3_dispatch(print(penguins$species))\n\n=&gt; print.factor\n * print.default\n\n\n\n=&gt; indicates the method that is called here.\n* indicated a method that is defined, but not called."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#default",
    "href": "slides/04-classes-methods/index.html#default",
    "title": "Classes and Methods",
    "section": "default",
    "text": "default\ndefault is a special pseudo-class that provides a fallback whenever a class-specific method is not available.\n\ns3_dispatch(print(pi2dp))\n\n   print.pi_trunc\n=&gt; print.default\n\n\nprint.pi_trunc is not defined."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#method-dispatch",
    "href": "slides/04-classes-methods/index.html#method-dispatch",
    "title": "Classes and Methods",
    "section": "Method dispatch",
    "text": "Method dispatch\nAn S3 object can have more than one class e.g.\n\nclass(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nUseMethod() works along the vector of classes (from the first class to the last), looks for a method for each class and dispatches to the first method it finds.\nIf no methods are defined for any of class, the default is used , e.g. print.default().\nIf there is no default, an error is thrown."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s3-methods-for-a-class",
    "href": "slides/04-classes-methods/index.html#s3-methods-for-a-class",
    "title": "Classes and Methods",
    "section": "S3 methods for a class",
    "text": "S3 methods for a class\nSee the methods for a given S3 class:\n\n# nls is nonlinear least squares\nmethods(class = \"nls\")\n\n [1] anova       coef        confint     deviance    df.residual fitted     \n [7] formula     logLik      nobs        predict     print       profile    \n[13] residuals   summary     vcov        weights    \nsee '?methods' for accessing help and source code\n\n\n\n\ns3_methods_class(\"nls\") |&gt; head()\n\n# A tibble: 6 × 4\n  generic     class visible source             \n  &lt;chr&gt;       &lt;chr&gt; &lt;lgl&gt;   &lt;chr&gt;              \n1 anova       nls   FALSE   registered S3method\n2 coef        nls   FALSE   registered S3method\n3 confint     nls   FALSE   registered S3method\n4 deviance    nls   FALSE   registered S3method\n5 df.residual nls   FALSE   registered S3method\n6 fitted      nls   FALSE   registered S3method"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s3-methods-for-a-generic",
    "href": "slides/04-classes-methods/index.html#s3-methods-for-a-generic",
    "title": "Classes and Methods",
    "section": "S3 methods for a generic",
    "text": "S3 methods for a generic\nSee the methods for a given generic function:\n\nmethods(\"coef\")\n\n[1] coef.aov*     coef.Arima*   coef.default* coef.listof*  coef.maov*   \n[6] coef.nls*    \nsee '?methods' for accessing help and source code\n\n\nAsterisked methods are not exported.\n\n\ns3_methods_generic(\"coef\")\n\n# A tibble: 6 × 4\n  generic class   visible source             \n  &lt;chr&gt;   &lt;chr&gt;   &lt;lgl&gt;   &lt;chr&gt;              \n1 coef    aov     FALSE   registered S3method\n2 coef    Arima   FALSE   registered S3method\n3 coef    default FALSE   registered S3method\n4 coef    listof  FALSE   registered S3method\n5 coef    maov    FALSE   registered S3method\n6 coef    nls     FALSE   registered S3method"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#view-s3-methods",
    "href": "slides/04-classes-methods/index.html#view-s3-methods",
    "title": "Classes and Methods",
    "section": "View S3 methods",
    "text": "View S3 methods\nS3 methods need not be in the same package as the generic.\nFind an unexported method with getS3method() or sloop::s3_get_method()\n\ngetS3method(\"coef\", \"default\")\n\nfunction (object, complete = TRUE, ...) \n{\n    cf &lt;- object$coefficients\n    if (complete) \n        cf\n    else cf[!is.na(cf)]\n}\n&lt;bytecode: 0x1181054d8&gt;\n&lt;environment: namespace:stats&gt;\n\n\n\ns3_get_method(\"coef.default\") # equivalent\n\n\nCan view code for exported functions by just typing the function name, or, in RStudio, using View(function_name)"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#writing-s3-methods",
    "href": "slides/04-classes-methods/index.html#writing-s3-methods",
    "title": "Classes and Methods",
    "section": "Writing S3 Methods",
    "text": "Writing S3 Methods\nThe arguments of a new method should be a superset of the arguments of the generic\n\nargs(print)\n\nfunction (x, ...) \nNULL\n\n\n\nNew methods have the name format generic.class:\n\nprint.pi_trunc &lt;- function(x, abbreviate = TRUE, ...){\n  dp_text &lt;- ifelse(abbreviate, \"d.p.\", \"decimal places\")\n  cat(\"pi: \", x$pi, \" (\", x$dp, \" \", dp_text, \")\", sep = \"\")\n}\nprint(pi2dp)\n\npi: 3.14 (2 d.p.)\n\n\n\n\n\nprint(pi2dp, abbreviate = FALSE)\n\npi: 3.14 (2 decimal places)\n\n\n\nNote the difference compared to calling print(pi2dp) before."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#inheritance",
    "href": "slides/04-classes-methods/index.html#inheritance",
    "title": "Classes and Methods",
    "section": "Inheritance",
    "text": "Inheritance\nS3 classes can share behaviour through a mechanism called inheritance. Inheritance is powered by three ideas.\n\nThe class can be a character vector\nIf a method is not found for the class in the first element of the vector, R looks for a method in the second class (and so on)\nA method can delegate work by calling NextMethod()."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#multiple-classes",
    "href": "slides/04-classes-methods/index.html#multiple-classes",
    "title": "Classes and Methods",
    "section": "Multiple classes",
    "text": "Multiple classes\nThe class of an S3 object can be a vector of classes:\n\nfit &lt;- glm(y ~ x, data = data.frame(y = 1:3, x = 4:6))\nclass(fit)\n\n[1] \"glm\" \"lm\" \n\n\nWe say fit is a \"glm\" object that inherits from class \"lm\".\n\nglm is a subclass of lm, because it always appears before it in the class vector.\nlm is a superclass of glm.\n\n\nGood practice:\n\nbase type of the subclass should be the same as the superclass\nattributes of the subclass should be a superset of the attributes of the superclass.\n\nThese practices are not enforced. These are recommendations in Advanced R for make life easier."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#inherits",
    "href": "slides/04-classes-methods/index.html#inherits",
    "title": "Classes and Methods",
    "section": "inherits()",
    "text": "inherits()\nThe inherits() function can be used to test if an object inherits from a given class:\n\ninherits(fit, \"glm\")\n\n[1] TRUE\n\ninherits(fit, \"lm\")\n\n[1] TRUE\n\ninherits(fit, \"xlm\")\n\n[1] FALSE"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#your-turn-part-1",
    "href": "slides/04-classes-methods/index.html#your-turn-part-1",
    "title": "Classes and Methods",
    "section": "Your turn (part 1)",
    "text": "Your turn (part 1)\n\nCreate a function to fit an ordinary least squares model (using lm()) given a response y and an explanatory variable x, that returns an object of a new class \"ols\", that inherits from \"lm\".\nDefine a print method for your function that it works as follows:\n\n\nset.seed(1)\nres &lt;- ols(x = 1:3, y = rnorm(3))\nres\n\nIntercept:  -0.217 \nSlope:  -0.1046 \n\n\nNote: I have set options(digits = 4) to limit the number of digits printed by default throughout this presentation (default is 7)."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#nextmethod",
    "href": "slides/04-classes-methods/index.html#nextmethod",
    "title": "Classes and Methods",
    "section": "NextMethod()",
    "text": "NextMethod()\nHard to understand, so here’s a concrete example for the common use case: [.\n\nnew_secret &lt;- function(x = double()) {\n  stopifnot(is.double(x))\n  structure(x, class = \"secret\")\n}\n\nprint.secret &lt;- function(x, ...) {\n  print(strrep(\"x\", nchar(x)))\n  invisible(x)\n}\n\nx &lt;- new_secret(c(15, 1, 456))\nx\n\n[1] \"xx\"  \"x\"   \"xxx\"\n\n\n\n?["
  },
  {
    "objectID": "slides/04-classes-methods/index.html#but-theres-a-problem",
    "href": "slides/04-classes-methods/index.html#but-theres-a-problem",
    "title": "Classes and Methods",
    "section": "But there’s a problem",
    "text": "But there’s a problem\n\nx[1]\n\n[1] 15\n\n\nWe want this to be secret! . . .\nThe default [ method doesn’t preserve the class.\n\ns3_dispatch(x[1])\n\n   [.secret\n   [.default\n=&gt; [ (internal)\n\n\n\nThere’s no [.default defined (no * next to it), just an internal generic. We’ll learn more about those later."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#a-first-attempt-at-a-solution",
    "href": "slides/04-classes-methods/index.html#a-first-attempt-at-a-solution",
    "title": "Classes and Methods",
    "section": "A first attempt at a solution",
    "text": "A first attempt at a solution\nSo, need to defined a [.secret method.\nBut the following doesn’t work:\n\n`[.secret` &lt;- function(x, i) {\n  new_secret(x[i])\n}\nx[1]\n\nIt gets stuck in infinite loop.\n\nTrying to subset x then call new_secret on it, to give it the secret class, so that print.secret works on said subset.\nBut get infinite loop because using [ in definition"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#whats-the-fix",
    "href": "slides/04-classes-methods/index.html#whats-the-fix",
    "title": "Classes and Methods",
    "section": "What’s the fix?",
    "text": "What’s the fix?\nWe need some way of calling the underlying [ code, i.e. the implementation that would get called if we didn’t have a [.secret method.\n\n`[.secret` &lt;- function(x, i) {\n  new_secret(NextMethod())\n}\nx[1]\n\n[1] \"xx\"\n\n\n\ni.e. we’re defining [.secret but we still want to access the internal [ method (so we don’t get stuck in a loop) as if [.secret wasn’t defined."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#delegation-with-nextmethod",
    "href": "slides/04-classes-methods/index.html#delegation-with-nextmethod",
    "title": "Classes and Methods",
    "section": "Delegation with NextMethod()",
    "text": "Delegation with NextMethod()\n\ns3_dispatch(x[1])\n\n=&gt; [.secret\n   [.default\n-&gt; [ (internal)\n\n\nThe =&gt; indicates that [.secret is called, but that NextMethod() delegates work to the underlying internal [ method, as shown by -&gt;."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#another-nextmethod-example",
    "href": "slides/04-classes-methods/index.html#another-nextmethod-example",
    "title": "Classes and Methods",
    "section": "Another NextMethod() example",
    "text": "Another NextMethod() example\n\ndata &lt;- data.frame(x = 1:3, y = 4:6)\nclass(data)\n\n[1] \"data.frame\"\n\ndata\n\n  x y\n1 1 4\n2 2 5\n3 3 6\n\nt(data)\n\n  [,1] [,2] [,3]\nx    1    2    3\ny    4    5    6\n\n\n\nt() is the transpose function. We started with a data.frame but after calling t on it, we have a matrix. What happened?"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#underlying-code",
    "href": "slides/04-classes-methods/index.html#underlying-code",
    "title": "Classes and Methods",
    "section": "Underlying code",
    "text": "Underlying code\n\nt.data.frame\n\nfunction (x) \n{\n    x &lt;- as.matrix(x)\n    NextMethod(\"t\")\n}\n&lt;bytecode: 0x10a2dfbc0&gt;\n&lt;environment: namespace:base&gt;\n\n\n\ns3_dispatch(t(data))\n\n=&gt; t.data.frame\n-&gt; t.default\n\n\n\nWe can explicitly call the next method that would be called by UseMethod() to reuse code whilst customising as required.\n\nWe have seen that UseMethod() will dispatch to the method of the next class in the class vector if a method is not defined for the first class."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#your-turn-part-2",
    "href": "slides/04-classes-methods/index.html#your-turn-part-2",
    "title": "Classes and Methods",
    "section": "Your turn (part 2)",
    "text": "Your turn (part 2)\n\nWrite a summary method for your ols class that uses NextMethod() to compute the usual lm summary, but return an object of class \"summary.ols\".\nWrite a print method for the \"summary.ols\" which works as follows:\n\n\nsummary(res)\n\nCoefficients: \n            Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)  -0.2170     1.1408 -0.1902   0.8804\nx            -0.1046     0.5281 -0.1980   0.8755\n\nResidual standard error:  0.7468 \nMultiple R-squared:  0.03774 \n\n\n\nwill get issues with inheriting e.g. add1 method"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s4",
    "href": "slides/04-classes-methods/index.html#s4",
    "title": "Classes and Methods",
    "section": "S4",
    "text": "S4\nS4 provides a formal approach to OOP. Its implementation is much stricter than S3.\nS4 has slots, a named component of the object accessed with @.\nS4 methods:\n\nuse specialised functions for creating classes, generics and methods\nallow multiple inheritance: a class can have multiple parents\nallow multiple dispatch: method selection based on the class of multiple objects\n\n\nuse import instead\nThe methods package provides the functions required to use S4 classes and methods, so always load this package when using S4."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s4-uses",
    "href": "slides/04-classes-methods/index.html#s4-uses",
    "title": "Classes and Methods",
    "section": "S4 uses",
    "text": "S4 uses\n\nS4 is the OOP system used for bioconductor packages\nThe Matrix package"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#r6",
    "href": "slides/04-classes-methods/index.html#r6",
    "title": "Classes and Methods",
    "section": "R6",
    "text": "R6\n\nThe R6 OOP system is defined in the R6 package: https://r6.r-lib.org\nEncapsulated OOP, similar to OOP systems in other languages\nThe Advanced R book cautions against using R6 - it leads to non-idiomatic R code."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#s7",
    "href": "slides/04-classes-methods/index.html#s7",
    "title": "Classes and Methods",
    "section": "S7",
    "text": "S7\n\nCurrently in the S7 package: https://rconsortium.github.io/S7/\nWill eventually be incorporated into R as the successor S3 and S4.\nAn example of using S7 for generative art: https://blog.djnavarro.net/posts/2024-02-25_s7/"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#references",
    "href": "slides/04-classes-methods/index.html#references",
    "title": "Classes and Methods",
    "section": "References",
    "text": "References\n\nMain reference for this session, goes a bit further (including R6): Wickham, H, Advanced R (2nd edn), Object-oriented programming section, https://adv-r.hadley.nz/oo.html\nFun example creating Turtle and TurtleWithPen classes to create simple graphics by moving the turtle: https://stuartlee.org/2019/07/09/s4-short-guide/"
  },
  {
    "objectID": "slides/04-classes-methods/index.html#license",
    "href": "slides/04-classes-methods/index.html#license",
    "title": "Classes and Methods",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#implicit-classes",
    "href": "slides/04-classes-methods/index.html#implicit-classes",
    "title": "Classes and Methods",
    "section": "Implicit classes",
    "text": "Implicit classes\nAs we’ve seen, is.object() or sloop::otype() can be used to find out if an object has a class (S3/S4/R6)\n\nis.object(factor(1:3))\n\n[1] TRUE\n\nis.object(1:3)\n\n[1] FALSE\n\n\nAn object that does not have an explicit class has an implicit class that will be used for S3 method dispatch."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#implicit-classes-and-dispatch",
    "href": "slides/04-classes-methods/index.html#implicit-classes-and-dispatch",
    "title": "Classes and Methods",
    "section": "Implicit classes and dispatch",
    "text": "Implicit classes and dispatch\nThe implicit class can be found with .class2(), or sloop::s3_class()\n\nM &lt;- matrix(1:12, nrow = 4)\nattr(M, \"class\")\n\nNULL\n\n.class2(M)\n\n[1] \"matrix\"  \"array\"   \"integer\" \"numeric\"\n\ns3_class(M)\n\n[1] \"matrix\"  \"integer\" \"numeric\"\n\n\nThe class() of an object does not uniquely determine its dispatch:\n\ns3_dispatch(print(M))\n\n   print.matrix\n   print.integer\n   print.numeric\n=&gt; print.default\n\n\n\n.class2 since R 4.0.0."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#attributes",
    "href": "slides/04-classes-methods/index.html#attributes",
    "title": "Classes and Methods",
    "section": "Attributes",
    "text": "Attributes\n\nWe can take advantage of existing S3 methods by returning an object of a existing S3 class or an implicit class, using attributes to add custom information\n\nx &lt;- matrix(c(1:5, 2*(1:5)), ncol = 2)\ncenter_x &lt;- scale(x, scale = FALSE)\nclass(center_x)\n\n[1] \"matrix\" \"array\" \n\nsummary(center_x)\n\n       V1           V2    \n Min.   :-2   Min.   :-4  \n 1st Qu.:-1   1st Qu.:-2  \n Median : 0   Median : 0  \n Mean   : 0   Mean   : 0  \n 3rd Qu.: 1   3rd Qu.: 2  \n Max.   : 2   Max.   : 4  \n\n\n\nattr(center_x, \"scaled:center\")\n\n[1] 3 6\n\n\nThis can avoid the need to define new classes and methods, in simple cases.\n\n\nattr(x, \"scaled:center\") in NULL\ncenter_x is still a matrix, and so summary(center_x) dispatches to summary.matrix. We can take advantage of the methods for matrix, without needing to define a new class for scaled."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#under-the-hood",
    "href": "slides/04-classes-methods/index.html#under-the-hood",
    "title": "Classes and Methods",
    "section": "Under the hood",
    "text": "Under the hood\n\ns3_dispatch(scale(x, scale = FALSE))\n\n   scale.matrix\n   scale.double\n   scale.numeric\n=&gt; scale.default\n\n\n\ns3_dispatch(summary(center_x))\n\n=&gt; summary.matrix\n   summary.double\n   summary.numeric\n * summary.default\n\n\n\nView(scale.default)\n\n\nIn scale.default() the attribute \"scaled:center\" is added to the x argument, so essentially, center_x is a matrix with extra information (in this case, the colMeans of the original columns)."
  },
  {
    "objectID": "slides/04-classes-methods/index.html#warning",
    "href": "slides/04-classes-methods/index.html#warning",
    "title": "Classes and Methods",
    "section": "Warning!",
    "text": "Warning!\nS3 has no checks for correctness, so we can change the class of objects.\nThis is a bad idea!\n\nmod &lt;- lm(flipper_length_mm ~ bill_length_mm, data = penguins)\nclass(mod)\n\n[1] \"lm\"\n\nclass(mod) &lt;- \"Date\"\nprint(mod)\n\nError in as.POSIXlt(.Internal(Date2POSIXlt(x, tz)), tz = tz): 'list' object cannot be coerced to type 'double'\n\n\n\n\nR doesn’t stop you from shooting yourself in the foot, but as long as you don’t aim the gun at your toes and pull the trigger, you won’t have a problem."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#overview",
    "href": "slides/07-r-with-cpp/index.html#overview",
    "title": "C++ and Rcpp",
    "section": "Overview",
    "text": "Overview\n\nWhen to use C++\nGetting set up\nC++ basics and Rcpp\nRcpp sugar"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#limits-of-r",
    "href": "slides/07-r-with-cpp/index.html#limits-of-r",
    "title": "C++ and Rcpp",
    "section": "Limits of R",
    "text": "Limits of R\nSometimes you reach the limits of R:\n\nYour code is still slow despite optimizing the computational approach and the R implementation\nYou could speed up the R code, but it results in very obscure, convoluted code\n\nIn this case it can make sense to code parts in C++."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#typical-scenarios",
    "href": "slides/07-r-with-cpp/index.html#typical-scenarios",
    "title": "C++ and Rcpp",
    "section": "Typical scenarios",
    "text": "Typical scenarios\nThere are some typical scenarios where C++ is likely to be a good idea\n\nLoops that can’t be vectorized because iterations depend on previous results\nRecursive functions, or problems which involve calling functions millions of times.\nProblems that require advanced data structures and algorithms that R doesn’t provide.\n\n\nThe overhead of calling a function in C++ is much lower than in R."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#set-up-to-use-c",
    "href": "slides/07-r-with-cpp/index.html#set-up-to-use-c",
    "title": "C++ and Rcpp",
    "section": "Set up to use C++",
    "text": "Set up to use C++\nTo use C++, you need a working C++ compiler.\nOn MacOS/Windows there is some setup to do, but it will also set you up to\n\nDevelop packages in R\nInstall packages from GitHub that include C/C++ code\n\nOn Linux, you will usually have a C++ compiler installed, but you might as well get set up to develop R packages too.\n\n\n\n\n\n\nNote\n\n\nIf you’ve followed the development tools section of the course prerequisites, you should be fully set-up for this already."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#linux",
    "href": "slides/07-r-with-cpp/index.html#linux",
    "title": "C++ and Rcpp",
    "section": "Linux",
    "text": "Linux\nDebian/Ubuntu:\napt-get update\napt-get install r-base-dev\nFedora/RedHat: should be set up already."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#macos",
    "href": "slides/07-r-with-cpp/index.html#macos",
    "title": "C++ and Rcpp",
    "section": "MacOS",
    "text": "MacOS\nOption 1\n\nRegister as an Apple developer (for free)\n\nThen, in the terminal:\nxcode-select --install\n\n\nOption 2\n\nInstall the current release of full Xcode from the Mac App Store\nWithin XCode go to Preferences -&gt; Downloads and install the Command Line Tools\nMore convenient but installs a lot you don’t need"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#windows",
    "href": "slides/07-r-with-cpp/index.html#windows",
    "title": "C++ and Rcpp",
    "section": "Windows",
    "text": "Windows\n\nDownload the Rtools installer that matches your version of R from https://cran.r-project.org/bin/windows/Rtools/\nRun the installer, Rtools.exe, keeping the default settings."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#a-first-c-function",
    "href": "slides/07-r-with-cpp/index.html#a-first-c-function",
    "title": "C++ and Rcpp",
    "section": "A first C++ function",
    "text": "A first C++ function\nConsider an R function add_r() to add two numbers\n\nadd_r &lt;- function(x, y) x + y\n\nHere’s how we might write an equivalent add_cpp() function in C++\n\ndouble add_cpp(double x, double y) { \n  double value = x + y;\n  return value;\n}\n\n\n\nThe type for the return value is declared first\nThe type of each argument must be declared\nThe type of intermediate objects must be declared\nReturn statements must use return\nEvery statement ends with ;"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#rcpp",
    "href": "slides/07-r-with-cpp/index.html#rcpp",
    "title": "C++ and Rcpp",
    "section": "Rcpp",
    "text": "Rcpp\nTo use add_cpp() in R we need to compile the C++ code and construct an R function that connects to the compiled C++ function.\nThe R package Rcpp takes care of these steps for us.\nOne way is to use the cppFunction(), e.g.\n\nlibrary(Rcpp)\ncppFunction('\n  double add_cpp(double x, double y) {\n    double value = x + y;\n    return value;\n  }\n')"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#using-the-c-function",
    "href": "slides/07-r-with-cpp/index.html#using-the-c-function",
    "title": "C++ and Rcpp",
    "section": "Using the C++ function",
    "text": "Using the C++ function\nAfter defining add_cpp() via cppFunction(), add_cpp() is available to use as a R function\n\nadd_cpp\n\nfunction (x, y) \n.Call(&lt;pointer: 0x104ec8680&gt;, x, y)\n\nadd_cpp(3, 5)\n\n[1] 8"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#stand-alone-c-files",
    "href": "slides/07-r-with-cpp/index.html#stand-alone-c-files",
    "title": "C++ and Rcpp",
    "section": "Stand-alone C++ files",
    "text": "Stand-alone C++ files\nIt is better to define functions in C++ files (extension .cpp). These files will be recognised by RStudio and other IDEs, with the usual benefits.\nThe C++ file should have these lines at the top:\n\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n\nThe compiler will locate the Rcpp header file with functions and class definitions supplied by Rcpp and include the contents.\nAdding the namespace means that we can use Rcpp functions in the C++ code without prefixing the function names by Rcpp::.\n\nAbove each function we want to use in R, add // [[Rcpp::export]]"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-c-file",
    "href": "slides/07-r-with-cpp/index.html#example-c-file",
    "title": "C++ and Rcpp",
    "section": "Example C++ file",
    "text": "Example C++ file\nThe following is in the file add_cpp2.cpp\n\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble add_cpp2(double x, double y) {\n  double value = x + y;\n  return value;\n}"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#sourcecpp",
    "href": "slides/07-r-with-cpp/index.html#sourcecpp",
    "title": "C++ and Rcpp",
    "section": "sourceCpp()",
    "text": "sourceCpp()\nNow we can use sourceCpp() to make the C++ functions available in R\n\npath &lt;- here::here(\"C++\", \"add_cpp2.cpp\")\nsourceCpp(path)\nadd_cpp2(5, 9)\n\n[1] 14"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#benefits-of-separate-c-files",
    "href": "slides/07-r-with-cpp/index.html#benefits-of-separate-c-files",
    "title": "C++ and Rcpp",
    "section": "Benefits of separate C++ files",
    "text": "Benefits of separate C++ files\nThere are a number of benefits to writing C++ code in separate .cpp files, compared to cppFunction()\n\nsyntax highlighting\navoid mistakes switching from R to C code\nline numbers for compilation errors\nhighlighting errors (e.g. missing “;”)"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#c-basics",
    "href": "slides/07-r-with-cpp/index.html#c-basics",
    "title": "C++ and Rcpp",
    "section": "C++ Basics",
    "text": "C++ Basics\n\nEvery statement within { } must be terminated by a ;.\nUse = for assignment (&lt;- is not valid).\nAddition, subtraction, multiplication and division use the same operators as R (+, -, *, /).\nComparison operators are the same as R (==, !=, &gt;, etc)\nOne-line comments start with //.\nMulti-line comments use /* */ delimiters\n\n/*\nExample\nmulti-line comment\n*/"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#data-types",
    "href": "slides/07-r-with-cpp/index.html#data-types",
    "title": "C++ and Rcpp",
    "section": "Data types",
    "text": "Data types\nThe basic C++ data types are scalars. Rcpp provides vector versions  \n\n\n\nR\nC++ (scalar)\nRcpp (vector)\n\n\n\n\nnumeric\ndouble\nNumericVector\n\n\ninteger\nint\nIntegerVector\n\n\ncharacter\nchar\nCharacterVector\n\n\nlogical\nbool\nLogicalVector\n\n\n\n\nRcpp also provides String as an alternative to char\n\nCare needed with NA double: more bits used to represent a real number vs single precision - range 2-(210) to 2(210). vs same with 2^7 - precision ~15 d.p. vs 7"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-no-inputs-scalar-output",
    "href": "slides/07-r-with-cpp/index.html#example-no-inputs-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: no inputs, scalar output",
    "text": "Example: no inputs, scalar output\n\nint one() {\n  return 1;\n}"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-ifelse-scalar-input-scalar-output",
    "href": "slides/07-r-with-cpp/index.html#example-ifelse-scalar-input-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: if/else (scalar input, scalar output)",
    "text": "Example: if/else (scalar input, scalar output)\n\nint signC(int x) {\n  if (x &gt; 0) {\n    return 1;\n  } else if (x == 0) {\n    return 0;\n  } else {\n    return -1;\n  }\n}"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#for-loop-syntax",
    "href": "slides/07-r-with-cpp/index.html#for-loop-syntax",
    "title": "C++ and Rcpp",
    "section": "For loop syntax",
    "text": "For loop syntax\nA C++ for loop has the form\n\nfor (int i = 0; i &lt; n; ++i) {\n  total += x[i];\n}\n\n\nSyntax: for (initialisation; condition; increment)\n\nInitialize integer i at zero\nContinue as long as i is less than n\nIncrement i by 1 after each iteration\n\n++i is equivalent to i = i + 1\n\n\ntotal += x[i] is equivalent to total = total + x[i]\nVector indices start at zero"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-for-loop-vector-input-scalar-output",
    "href": "slides/07-r-with-cpp/index.html#example-for-loop-vector-input-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: for loop (vector input, scalar output)",
    "text": "Example: for loop (vector input, scalar output)\n\ndouble sumC(NumericVector x) {\n  int n = x.size();\n  double total = 0;\n  for (int i = 0; i &lt; n; ++i) {\n    total += x[i];\n  }\n  return total;\n}\n\n\nUse .size() method to find the length of a vector"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-while-loop-vector-input-scalar-output",
    "href": "slides/07-r-with-cpp/index.html#example-while-loop-vector-input-scalar-output",
    "title": "C++ and Rcpp",
    "section": "Example: while loop (vector input, scalar output)",
    "text": "Example: while loop (vector input, scalar output)\n\ndouble sumC(NumericVector x) {\n  int n = x.size();\n  double total = 0;\n  int i = 0;\n  while (i &lt; n) {\n    total += x[i];\n    ++i;\n  }\n  return total;\n}\n\n\nUse break to break from a while or for loop\nUse continue to skip to the next iteration (vs next in R)"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-vector-output",
    "href": "slides/07-r-with-cpp/index.html#example-vector-output",
    "title": "C++ and Rcpp",
    "section": "Example: vector output",
    "text": "Example: vector output\nThe following computes the Euclidean distances\n\\[d_i  = \\sqrt{(x - y_i)^2}\\]\n\nNumericVector distC(double x, NumericVector y) {\n  int n = y.size();\n  NumericVector dist(n);\n  for(int i = 0; i &lt; n; ++i) {\n    dist[i] = sqrt(pow(y[i] - x, 2.0));\n  }\n  return out;\n}\n\n\ndist(n) is used to create a numeric vector named dist of length n.\nv(n) would create a vector named v."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#c-functions",
    "href": "slides/07-r-with-cpp/index.html#c-functions",
    "title": "C++ and Rcpp",
    "section": "C++ Functions",
    "text": "C++ Functions\npow is a standard C++ function for computing a value raised to a power.\nBoth pow and sqrt are functions from the &lt;cmath&gt; library, see e.g. w3schools C++ math.\nTo use &lt;cmath&gt; functions in C++ code, we would normally need to include the &lt;cmath&gt; header in our .cpp file. However, Rcpp defines its own version of these functions, so we can use them with just the Rcpp header."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#creating-a-c-file-in-rstudio",
    "href": "slides/07-r-with-cpp/index.html#creating-a-c-file-in-rstudio",
    "title": "C++ and Rcpp",
    "section": "Creating a C++ file in RStudio",
    "text": "Creating a C++ file in RStudio\nFrom the menu bar:\n\nGo to File &gt; New File &gt; C++ file\nThis template already includes the headers required for Rcpp\nDelete the extra content, apart from the comment //[Rcpp::export]\n\nYou can also create a C++ file from the new file drop-down in the Files pane, but this will be blank."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#your-turn",
    "href": "slides/07-r-with-cpp/index.html#your-turn",
    "title": "C++ and Rcpp",
    "section": "Your turn",
    "text": "Your turn\n\nCreate a new C++ file (recommend using the RStudio template)\nConvert the following R function that computes a weighted mean to C++\n\n\nwmean_r &lt;- function(x, w){\n  n &lt;- length(x)\n  total &lt;- total_w &lt;- 0\n  for (i in 1:n){\n    total &lt;- total + x[i] * w[i]\n    total_w &lt;- total_w + w[i]\n  }  \n  total/total_w\n}\n\n\nUse sourceCpp() to source in your function.\nUse bench::mark() to compare wmean_r(), wmean_cpp() and the stats function weighted.mean()."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#missing-values-in-c-data-types",
    "href": "slides/07-r-with-cpp/index.html#missing-values-in-c-data-types",
    "title": "C++ and Rcpp",
    "section": "Missing values in C++ data types",
    "text": "Missing values in C++ data types\nC++ data types do not handle NAs in input well\n\nint: use a length 1 IntegerVector instead\ndouble: NAs okay (converted to NAN)\nchar: use String instead\nbool: NAs converted to true; use int instead"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#missing-values-in-rcpp-vectors",
    "href": "slides/07-r-with-cpp/index.html#missing-values-in-rcpp-vectors",
    "title": "C++ and Rcpp",
    "section": "Missing values in Rcpp vectors",
    "text": "Missing values in Rcpp vectors\nRcpp vectors handle NAs in the corresponding type\n\n\n\nRcpp (vector)\nNA\n\n\n\n\nNumericVector\nNA_REAL\n\n\nIntegerVector\nNA_INTEGER\n\n\nCharacterVector\nNA_STRING\n\n\nLogicalVector\nNA_LOGICAL"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#matrices",
    "href": "slides/07-r-with-cpp/index.html#matrices",
    "title": "C++ and Rcpp",
    "section": "Matrices",
    "text": "Matrices\nEach vector type has a corresponding matrix equivalent: NumericMatrix, IntegerMatrix, CharacterMatrix and LogicalMatrix.\nCreate a matrix called named m1\n\nNumericMatrix m1(10, 5);\n\n\nSubset with (), e.g. m1(3, 2) for the value in row 3, column 2.\nThe first element is m1(0, 0).\nUse .nrow and .ncol methods to get the number of rows and columns\nAssign matrix elements as follows\n\n\nm1(0, 0) = 1;"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-row-sums-matrix-input-vector-output",
    "href": "slides/07-r-with-cpp/index.html#example-row-sums-matrix-input-vector-output",
    "title": "C++ and Rcpp",
    "section": "Example: row sums (matrix input, vector output)",
    "text": "Example: row sums (matrix input, vector output)\n\nNumericVector rowSumsC(NumericMatrix x) {\n  int nrow = x.nrow(), ncol = x.ncol();\n  NumericVector out(nrow);\n  \n  for (int i = 0; i &lt; nrow; i++) {\n    double total = 0;\n    for (int j = 0; j &lt; ncol; j++) {\n      total += x(i, j);\n    }\n    out[i] = total;\n  }\n  return out;\n}"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#statistical-distributions",
    "href": "slides/07-r-with-cpp/index.html#statistical-distributions",
    "title": "C++ and Rcpp",
    "section": "Statistical distributions",
    "text": "Statistical distributions\nAs in R, Rcpp provides d/p/q/r functions for the density, distribution function, quantile function and random generation.\n\nFunctions in the Rcpp:: namespace return a vector\nFunctions in the R:: namespace (also provided by the Rcpp R package) return a scalar\n\nFor example we can sample a single value from a Gamma distribution by extracting the first element from a vector\nRcpp::rgamma(1, 3, 1 / (y * y + 4))[0];\nOr use the R::rgamma() function to sample a single value directly\nR::rgamma(3, 1 / (y * y + 4));"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#your-turn-part-1",
    "href": "slides/07-r-with-cpp/index.html#your-turn-part-1",
    "title": "C++ and Rcpp",
    "section": "Your turn (part 1)",
    "text": "Your turn (part 1)\nIn a new C++ file, convert the following Gibbs sampler to C++\n\ngibbs_r &lt;- function(N, thin) {\n  mat &lt;- matrix(nrow = N, ncol = 2)\n  x &lt;- y &lt;- 0\n\n  for (i in 1:N) {\n    for (j in 1:thin) {\n      x &lt;- rgamma(1, 3, y * y + 4)\n      y &lt;- rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))\n    }\n    mat[i, ] &lt;- c(x, y)\n  }\n  mat\n}"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#your-turn-part-2",
    "href": "slides/07-r-with-cpp/index.html#your-turn-part-2",
    "title": "C++ and Rcpp",
    "section": "Your turn (part 2)",
    "text": "Your turn (part 2)\nCreate a wrapper function to set the seed as follows:\n\nset_seed &lt;- function(expr){\n  set.seed(1)\n  eval(expr)\n}\n\nBenchmark your gibbs_r() and gibbs_c() functions with N = 100 and thin = 10, using your wrapper function to set the seed."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#rcpp-sugar-1",
    "href": "slides/07-r-with-cpp/index.html#rcpp-sugar-1",
    "title": "C++ and Rcpp",
    "section": "Rcpp sugar",
    "text": "Rcpp sugar\nRcpp provides some “syntactic sugar” to allow us to write C++ code that is more like R code.\nOne example is operating on rows or columns of matrices. So far we have seen how to update individual elements of a NumericMatrix. Rcpp lets us extract and update whole rows/columns, e.g. in a matrix with three columns, we can set the \\(i\\)th row with\n\nmat(i, _) = NumericVector::create(1, 2, 3);\n\nA whole column would be extracted with mat(_, j)."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#vectorized-functions",
    "href": "slides/07-r-with-cpp/index.html#vectorized-functions",
    "title": "C++ and Rcpp",
    "section": "Vectorized functions",
    "text": "Vectorized functions\nThe vectorized random generation functions are another example of Rcpp sugar.\nRcpp provide many more vectorized functions, for example:\n\narithmetic operators (+, -, *, \\)\nlogical operators (==, !, =&lt;)\narithmetic functions (sqrt, pow, …)\nstatistical summaries (mean, median, )\n\nIn addition, Rcpp provides many R-like functions, such as which_max or rowSums, see Unofficial API documentation for a full list."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#rcpp-sugar-vectorized-functions",
    "href": "slides/07-r-with-cpp/index.html#rcpp-sugar-vectorized-functions",
    "title": "C++ and Rcpp",
    "section": "Rcpp sugar: vectorized functions",
    "text": "Rcpp sugar: vectorized functions\nRecall our distance function from earlier:\n\nNumericVector distC(double x, NumericVector y) {\n  int n = y.size();\n  NumericVector out(n);\n  for(int i = 0; i &lt; n; ++i) {\n    out[i] = sqrt(pow(ys[i] - x, 2.0));\n  }\n  return out;\n}\n\nWith Rcpp vectorization, we can simplify this to:\n\nNumericVector dist_sugar(double x, NumericVector y) {\n  return sqrt(pow(x - y, 2));\n}"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#example-row-maximums",
    "href": "slides/07-r-with-cpp/index.html#example-row-maximums",
    "title": "C++ and Rcpp",
    "section": "Example: row maximums",
    "text": "Example: row maximums\nThis example combines row-indexing and a vectorized function, max().\n\nNumericVector row_max(NumericMatrix mat) {\n  int nrow = mat.nrow();\n  NumericVector max(nrow);\n  for (int i = 0; i &lt; nrow; i++)\n    max[i] = max( m(i,_) );\n  return max;\n}"
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#your-turn-1",
    "href": "slides/07-r-with-cpp/index.html#your-turn-1",
    "title": "C++ and Rcpp",
    "section": "Your turn",
    "text": "Your turn\nThe following R function can be used to simulate the value of \\(\\pi\\):\n\napprox_pi_r &lt;- function(N) {\n    x &lt;- runif(N)\n    y &lt;- runif(N)\n    d &lt;- sqrt(x^2 + y^2)\n    return(4 * sum(d &lt; 1.0) / N)\n}\n\nConvert this to C++, taking advantage of the vectorized Rcpp functions.\n\nThis function gets used in an exercise in the Rcpp packages session."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#references",
    "href": "slides/07-r-with-cpp/index.html#references",
    "title": "C++ and Rcpp",
    "section": "References",
    "text": "References\n\n\nSimilar scope to this module: Gillespie, C and Lovelace, R, Efficient R programming, Rcpp section, https://csgillespie.github.io/efficientR/performance.html#rcpp\nGoing a bit further: Wickham, H, Advanced R (2nd edn), Rewriting R code in C++ chapter, https://adv-r.hadley.nz/rcpp.html\nNot very polished, but broader coverage of Rcpp functionality: Tsuda, M.E., Rcpp for everyone, https://teuder.github.io/rcpp4everyone_en/300_Rmath.html\nThe Rcpp vignettes, accessed via browseVignettes(\"Rcpp\") or CRAN\nThe unofficial Rcpp API documentation\nCase studies (optimising by improving R code and/or using C++)\n\nhttps://robotwealth.com/optimising-the-rsims-package-for-fast-backtesting-in-r/\nhttps://gallery.rcpp.org/articles/bayesian-time-series-changepoint/\nThe Rcpp Gallery has all sorts of examples, many illustrating advanced features of Rcpp)."
  },
  {
    "objectID": "slides/07-r-with-cpp/index.html#license",
    "href": "slides/07-r-with-cpp/index.html#license",
    "title": "C++ and Rcpp",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/02-github/index.html#overview",
    "href": "slides/02-github/index.html#overview",
    "title": "Open Source and Git(Hub)",
    "section": "Overview",
    "text": "Overview\n\nOpen code and software\ngit\nGitHub\ngit and GitHub with RStudio"
  },
  {
    "objectID": "slides/02-github/index.html#open-practices",
    "href": "slides/02-github/index.html#open-practices",
    "title": "Open Source and Git(Hub)",
    "section": "Open practices",
    "text": "Open practices\n\n\nRecognised as integral to healthy research culture\nWorking openly means that our work is\n\nAccessible, for free\nOpen to scrutiny (verifiable)\nReproducible\n\n\n (source: analogicus from Pexels)"
  },
  {
    "objectID": "slides/02-github/index.html#code-and-software",
    "href": "slides/02-github/index.html#code-and-software",
    "title": "Open Source and Git(Hub)",
    "section": "Code and Software",
    "text": "Code and Software\n\n\nScripts: e.g analysis/simulation\n\nCustomised\nReproducible workflow\n\nread data\nanalyse\nsummarise\nreport\n\n\n\nSoftware: Package, tool, dashboard\n\nOptimized\nReusable\nSharable"
  },
  {
    "objectID": "slides/02-github/index.html#why-share-code-and-software",
    "href": "slides/02-github/index.html#why-share-code-and-software",
    "title": "Open Source and Git(Hub)",
    "section": "Why share code and software?",
    "text": "Why share code and software?\nBeyond general benefits of open practices\n\nIncreased impact and reputation\nFaster translation into practice\nAdditional, citable, outputs\n\nBenefits of coding in the open\n\nEncourages good practices\nFacilitates collaboration\nCan give access to software engineering tools"
  },
  {
    "objectID": "slides/02-github/index.html#sharing-code-in-an-online-repository",
    "href": "slides/02-github/index.html#sharing-code-in-an-online-repository",
    "title": "Open Source and Git(Hub)",
    "section": "Sharing code in an online repository",
    "text": "Sharing code in an online repository\n\n\nPros\n\nVersion control (commit history + releases)\nREADME.md for quick documentation\nFacilitates contribution (bug reports, patches)\nCan use CITATION.cff file for clear citation GitHub\nLinks to Zenodo for publishing releases\n\nCons\n\nLearning curve to take full advantage"
  },
  {
    "objectID": "slides/02-github/index.html#more-on-open-code-and-software",
    "href": "slides/02-github/index.html#more-on-open-code-and-software",
    "title": "Open Source and Git(Hub)",
    "section": "More on open code and software",
    "text": "More on open code and software\nhttps://www.heatherturner.net/talks/gregynog2022/#1\nThe Turing Way: A handbook to reproducible, ethical and collaborative data science"
  },
  {
    "objectID": "slides/02-github/index.html#version-control",
    "href": "slides/02-github/index.html#version-control",
    "title": "Open Source and Git(Hub)",
    "section": "Version Control",
    "text": "Version Control\nWhen developing code, we often want to keep old versions.\nWe might save with different files names\ncode                               \n  ¦--simulations.R                  \n  ¦--simulations_correct_sd.R       \n  ¦--simulations_return_parameters.R\nor comment on changes (especially when collaborating with others)\n\n## EK 2023-01-10 use geom_bar instead of geom_histogram\n## p &lt;- p + geom_histogram(stat = \"identity\")\np &lt;- p + geom_bar(stat = \"identity\")\n## HT 2023-01-09 remove legend from plot\np &lt;- p + theme(legend.position = \"none\")\n\nEither way it can get messy and hard to track/revert changes!"
  },
  {
    "objectID": "slides/02-github/index.html#git-1",
    "href": "slides/02-github/index.html#git-1",
    "title": "Open Source and Git(Hub)",
    "section": "git",
    "text": "git\ngit is a version control system that allows us to record changes made to files in a repository or repo.\nEach version has a unique ID and metadata:\n\nWho created the new version\nA short description of changes made\nWhen the version was made\n\nVersions can be compared, restored and merged."
  },
  {
    "objectID": "slides/02-github/index.html#git-repository",
    "href": "slides/02-github/index.html#git-repository",
    "title": "Open Source and Git(Hub)",
    "section": "git repository",
    "text": "git repository\nTo get started, a repository must be created locally (within a working directory on your computer) or on a remote hosting platform (we’ll use GitHub).\ngit can then track when files/folders are\n\nAdded\nModified\nDeleted\n\nRepositories can have multiple branches of development. We will work on a single branch, with the default name of main."
  },
  {
    "objectID": "slides/02-github/index.html#staging-and-committing",
    "href": "slides/02-github/index.html#staging-and-committing",
    "title": "Open Source and Git(Hub)",
    "section": "Staging and committing",
    "text": "Staging and committing\nVersions are created in a commit.\nWe prepare the commit by staging changes we want to record:\n\nUntracked files (git treats the whole content as new)\nTracked files that have been modified or deleted since the last commit\n\nThink of it like taking photographs: we stage the scene by adding/removing people, or changing people’s outfits, when we have a scene we want to save we take a photograph."
  },
  {
    "objectID": "slides/02-github/index.html#git-github",
    "href": "slides/02-github/index.html#git-github",
    "title": "Open Source and Git(Hub)",
    "section": "git + Github",
    "text": "git + Github\n\n\nThe full power comes by connecting a local repo to GitHub.\n\nYou can make changes locally and push them to GitHub\nYou can make changes via the GitHub website and later pull them into your local copy.\nCollaborators can also push/pull changes to the repo."
  },
  {
    "objectID": "slides/02-github/index.html#github-1",
    "href": "slides/02-github/index.html#github-1",
    "title": "Open Source and Git(Hub)",
    "section": "GitHub",
    "text": "GitHub\nhttps://github.com/\n\nFree version allows private/public projects\nCan share/collaborate with people outside Warwick\nDevelop your personal portfolio"
  },
  {
    "objectID": "slides/02-github/index.html#features",
    "href": "slides/02-github/index.html#features",
    "title": "Open Source and Git(Hub)",
    "section": "Features",
    "text": "Features\nGitHub repositories have some nice features:\n\nREADME.md displayed as HTML\nBrowsable commit history\nIssues where you/others can note bug reports/TODO/feature requests\nPull requests (advanced) where you/others can propose changes to the code to be reviewed\nActions (advanced) automated actions when you commit to the repo\nProjects (advanced) to organize issues (To Do/In Progress/Done)\nWiki for project documentation\nDeploy websites with pages"
  },
  {
    "objectID": "slides/02-github/index.html#example-repo",
    "href": "slides/02-github/index.html#example-repo",
    "title": "Open Source and Git(Hub)",
    "section": "Example repo",
    "text": "Example repo\n\n{palmerpenguins}\n\nOther repos to explore:\n\nThis course website and slides\nR development guide"
  },
  {
    "objectID": "slides/02-github/index.html#your-turn-create-a-github-repository",
    "href": "slides/02-github/index.html#your-turn-create-a-github-repository",
    "title": "Open Source and Git(Hub)",
    "section": "Your turn! Create a GitHub repository",
    "text": "Your turn! Create a GitHub repository\n\nLogin or sign up for a free account at https://www.github.com.\n\nRecommend using personal email\nUsername recommendations:\n\nIncorporate your actual name\nReuse your username from other contexts.\nUse a name you can share in professional contexts.\nUse all lower case letters.\n\n\nClick on + in the top right to create a new, public, repository called github-intro.\n\nChoose to initialize the repository with a README file"
  },
  {
    "objectID": "slides/02-github/index.html#your-turn-edit-on-github",
    "href": "slides/02-github/index.html#your-turn-edit-on-github",
    "title": "Open Source and Git(Hub)",
    "section": "Your turn! Edit on GitHub",
    "text": "Your turn! Edit on GitHub\n\n\nClick the pencil icon on the README.md file to edit.\n\nUpdate the title\nAdd some example content using markdown syntax\nUse the “Preview changes” tab to check your edits\n\nScroll down to the Commit changes section\n\nAdd a short description of your changes in the first dialog box, e.g. add basic information to README\nClick the green Commit changes button\nThis will stage and commit the file in one go.\n\nView the commit history (look for clock icon with anti-clockwise arrow) and look at the diff for your commit.\n\nSee Basic writing and formatting syntax for more on editing markdown."
  },
  {
    "objectID": "slides/02-github/index.html#your-turn-continue-experimenting",
    "href": "slides/02-github/index.html#your-turn-continue-experimenting",
    "title": "Open Source and Git(Hub)",
    "section": "Your turn! Continue experimenting",
    "text": "Your turn! Continue experimenting\nFurther exercises to do while other people set up authentication.\n\nTry uploading a picture from Unsplash. Go to Add file &gt; Upload files. Edit your README to add the image.\nGo to Add file &gt; Create new file. Type subfolder/ in the “Name your file box” to create a subfolder. Now type README.md in the “Name your file box”. Add some content to the README and commit - try some new markdown syntax, e.g. emoji or a table.\nBuild a stunning README for your GitHub profile"
  },
  {
    "objectID": "slides/02-github/index.html#using-git-locally",
    "href": "slides/02-github/index.html#using-git-locally",
    "title": "Open Source and Git(Hub)",
    "section": "Using git locally",
    "text": "Using git locally\nCheck if you already have git by running the following command in a terminal (e.g. Terminal tab on RStudio).\nOn MacOS/Linux (or Windows with Rtools)\n\nwhich git\n\nOn Windows\n\nwhere git\n\nMacOS: If asked to install the Xcode command line tools, say yes - this will install git."
  },
  {
    "objectID": "slides/02-github/index.html#installing-git",
    "href": "slides/02-github/index.html#installing-git",
    "title": "Open Source and Git(Hub)",
    "section": "Installing git",
    "text": "Installing git\nWindows:\n\nUse the installer from https://git-scm.com/downloads\nCheck RStudio can find the git executable\n\nGo to Tools &gt; Global Options &gt; Git/SVN to check\nRestart RStudio before trying to use git\n\n\nLinux:\n\nsudo apt-get install git\n\nor\n\nsudo yum install git"
  },
  {
    "objectID": "slides/02-github/index.html#configure-git-globally",
    "href": "slides/02-github/index.html#configure-git-globally",
    "title": "Open Source and Git(Hub)",
    "section": "Configure git (globally)",
    "text": "Configure git (globally)\nSet the default name and email to associate with your git commits:\nlibrary(usethis)\nuse_git_config(\n  user.name = \"Ada Lovelace\",     # your full name\n  user.email = \"ada@example.com\"  # email associated with GitHub account\n)\nTo keep your email private:\n\nGo to https://github.com/settings/emails, select “Keep my email address private” and “Block command line pushes that expose my email” options\nConfigure git to use the address provided of the form ID+username@users.noreply.github.com"
  },
  {
    "objectID": "slides/02-github/index.html#authentication",
    "href": "slides/02-github/index.html#authentication",
    "title": "Open Source and Git(Hub)",
    "section": "Authentication",
    "text": "Authentication\nGitHub requires authentication with a Personal Access Token or SSH key.\n\n\n\nSSH keys\nPAT\n\n\n\n\nMore setup (on Windows)\nusethis helpers\n\n\nOnce per computer+host\nRenew every 30 days (recommended)\n\n\nNeed for HPC\nNeed for usethis/other R packages\n\n\n\nRecommend: PAT now (easier), SSH later if needed"
  },
  {
    "objectID": "slides/02-github/index.html#main-recommendations",
    "href": "slides/02-github/index.html#main-recommendations",
    "title": "Open Source and Git(Hub)",
    "section": "Main recommendations",
    "text": "Main recommendations\nFrom usethis vignette Managing Git(Hub) Credentials:\nOur main recommendations are:\n\nAdopt HTTPS as your Git transport protocol.\nTurn on two-factor authentication for your GitHub account.\nUse a personal access token (PAT) for all Git remote operations from the command line or from R.\nAllow tools to store and retrieve your credentials from the Git credential store. If you have previously set your GitHub PAT in .Renviron, stop doing that.\n\nHighly recommend reading this entire vignette and following all guidance"
  },
  {
    "objectID": "slides/02-github/index.html#sitrep-and-vaccinate",
    "href": "slides/02-github/index.html#sitrep-and-vaccinate",
    "title": "Open Source and Git(Hub)",
    "section": "sitrep and vaccinate",
    "text": "sitrep and vaccinate\n\nlibrary(usethis) # make sure &gt; v2.0.0\ngit_sitrep() # current situation report\ngit_vaccinate() # add files to global .gitignore (best practice)"
  },
  {
    "objectID": "slides/02-github/index.html#get-a-personal-access-token-pat",
    "href": "slides/02-github/index.html#get-a-personal-access-token-pat",
    "title": "Open Source and Git(Hub)",
    "section": "Get a personal access token (PAT)",
    "text": "Get a personal access token (PAT)\nFirst, make sure you’re signed into GitHub. Then run\n\nusethis::create_github_token()\n\n\nAdd Note describing use-case (e.g. personal-macbook-pro-2021, project-xyz)\nSelect expiration (recommend default 30 days)\nCheck scope\nClick ‘Generate Token’\nImportant! Copy token to clipboard, do not close window until stored (see next slide)!\nYou may want to store token in a secure vault, like 1Password or BitWarden"
  },
  {
    "objectID": "slides/02-github/index.html#put-your-pat-into-the-local-git-credential-store",
    "href": "slides/02-github/index.html#put-your-pat-into-the-local-git-credential-store",
    "title": "Open Source and Git(Hub)",
    "section": "Put your PAT into the local Git credential store",
    "text": "Put your PAT into the local Git credential store\nBy installing usethis, you will also have the gitcreds package to manage git credentials.\nPut your PAT into the Git credential store by running the following command and entering your copied PAT at the prompt (assume the PAT is on your clipboard).\n\ngitcreds::gitcreds_set()\n\n\nIf you don’t have a PAT stored, will prompt you to enter: paste!\nIf you do, you will be given a choice to keep/replace/see the password\n\nchoose as appropriate\nif replacing, paste!"
  },
  {
    "objectID": "slides/02-github/index.html#pat-maintenance",
    "href": "slides/02-github/index.html#pat-maintenance",
    "title": "Open Source and Git(Hub)",
    "section": "PAT maintenance",
    "text": "PAT maintenance\n\nBy default token will expire after 30 days.\nReturn to https://github.com/settings/tokens and click on its Note\n\nor else click on link in e-mail telling you token is about to expire!\n\nRegenerate token\nrerun gitcreds::gitcreds_set()\n\nA bit of a pain to do this every month, but only takes a couple of minutes."
  },
  {
    "objectID": "slides/02-github/index.html#your-turn",
    "href": "slides/02-github/index.html#your-turn",
    "title": "Open Source and Git(Hub)",
    "section": "Your turn!",
    "text": "Your turn!\nIf you need to, generate and store a PAT, as described over last few slides and in the vignette.\nIf you already have a PAT set, read the vignette and follow through on other best practice recommendations."
  },
  {
    "objectID": "slides/02-github/index.html#create-an-rstudio-project-from-a-github-repo",
    "href": "slides/02-github/index.html#create-an-rstudio-project-from-a-github-repo",
    "title": "Open Source and Git(Hub)",
    "section": "Create an RStudio project from a GitHub repo",
    "text": "Create an RStudio project from a GitHub repo\nNow you can clone your GitHub repo locally.\n\nGo to your repo homepage on GitHub. Click the green “Code” button, copy the HTTPS address (of the form https://github.com/USERNAME/REPO.git).\nIn RStudio, go to File &gt; New Project… &gt; Version Control &gt; Git.\n\nEnter the repo URL you just copied. The project directory name will be filled automatically.\nBrowse to a location you want the project directory to be created.\nClick Create Project."
  },
  {
    "objectID": "slides/02-github/index.html#git-tab",
    "href": "slides/02-github/index.html#git-tab",
    "title": "Open Source and Git(Hub)",
    "section": "Git tab",
    "text": "Git tab\nA Git tab is added to the pane that is in the top right by default, usually with Environment, History, and Connections tabs.\nThe initial view is equivalent to the output of the terminal command git status.\n\n\nWe can stage changes to commit\n\nUnderlying command:\ngit add &lt;file/folder&gt;.\n\nThen commit a set of changes\n\nUnderlying command:\ngit commit -m \"commit message\""
  },
  {
    "objectID": "slides/02-github/index.html#gitignore",
    "href": "slides/02-github/index.html#gitignore",
    "title": "Open Source and Git(Hub)",
    "section": ".gitignore",
    "text": ".gitignore\nAt this stage you should see two untracked files in your Git Pane that were created when setting up the project: an .Rproj file and a .gitignore file.\nThe .gitignore file specifies files that git should ignore - they won’t appear in the git pane even as untracked files.\nExamples of how to specify files in .gitignore:\n\nSingle file: .Rhistory\nFile pattern: *.log (all files with .log extension)\nDirectory (and files in it): /dirname/\n\nThe .gitignore file must at least be staged to have an effect."
  },
  {
    "objectID": "slides/02-github/index.html#first-commit-from-rstudio",
    "href": "slides/02-github/index.html#first-commit-from-rstudio",
    "title": "Open Source and Git(Hub)",
    "section": "First commit from RStudio",
    "text": "First commit from RStudio\n\nStage and commit the .Rproj file and .gitignore file, with the message “setup RStudio project”.\nClick on the clock icon in the Git pane to view the history of previous commits.\nClose the “Review Changes” window. Now click the green up arrow to push your changes to GitHub.\nGo to the repo on GitHub and verify your changes have been pushed."
  },
  {
    "objectID": "slides/02-github/index.html#pulling-changes-from-github",
    "href": "slides/02-github/index.html#pulling-changes-from-github",
    "title": "Open Source and Git(Hub)",
    "section": "Pulling changes from GitHub",
    "text": "Pulling changes from GitHub\n\nEdit the README once more on GitHub in a new commit.\nBack in RStudio, on the Git tab, click the blue down arrow to pull the changes from GitHub\nThe changes to README should now appear in your local copy"
  },
  {
    "objectID": "slides/02-github/index.html#avoid-conflicts",
    "href": "slides/02-github/index.html#avoid-conflicts",
    "title": "Open Source and Git(Hub)",
    "section": "Avoid conflicts",
    "text": "Avoid conflicts\nIf you work on both the local and GitHub copy, it’s possible to get out of sync and end up with conflicting versions of the same file.\nIt is possible to fix this, but it can be tricky/confusing. It’s best to avoid problem in first place!\nRecommended practice:\n\nAlways commit and push changes at the end of an RStudio session\nAlways pull changes at the beginning of an RStudio session"
  },
  {
    "objectID": "slides/02-github/index.html#general-workflow",
    "href": "slides/02-github/index.html#general-workflow",
    "title": "Open Source and Git(Hub)",
    "section": "General workflow",
    "text": "General workflow\n\nCommit regularly, once you’ve got a small complete change, e.g. a working draft of a function, a bug fix, a draft of a README.\n\nIt is easier to review/revert changes if they relate to a single file or common issue\nIdeally, make a commit everytime you make a substantial, coherent set of changes.\nAt least make a commit every time you take a break, especially when leaving at the end of your working session\n\nPush often enough that GitHub is a useful backup"
  },
  {
    "objectID": "slides/02-github/index.html#some-other-tools",
    "href": "slides/02-github/index.html#some-other-tools",
    "title": "Open Source and Git(Hub)",
    "section": "Some other tools",
    "text": "Some other tools\n\ngert R package has functions for interacting with git\nIt can be worth using dedicated software for interacting with git/GitHub\n\nGitHub desktop\nGitKraken"
  },
  {
    "objectID": "slides/02-github/index.html#summary",
    "href": "slides/02-github/index.html#summary",
    "title": "Open Source and Git(Hub)",
    "section": "Summary",
    "text": "Summary\n\nWorking openly encourages good practices\nYour code/software is an asset!\nWe can make steps to improve our own practice\ngit and GitHub are invaluable resources for version control and collaboration"
  },
  {
    "objectID": "slides/02-github/index.html#learning-more",
    "href": "slides/02-github/index.html#learning-more",
    "title": "Open Source and Git(Hub)",
    "section": "Learning more",
    "text": "Learning more\n\nHappy Git and GitHub for the useR by Jenny Bryan\nhttp://happygitwithr.com\nGitHub for supporting, reusing, contributing and failing safely by Allison Horst and Julie Lowndes\nhttps://www.openscapes.org/blog/2022/05/27/github-illustrated-series/\nVersion control: A practical introduction to Git and GitHub\nhttps://www.jvcasillas.com/github_workshop/index.html#1"
  },
  {
    "objectID": "slides/02-github/index.html#license",
    "href": "slides/02-github/index.html#license",
    "title": "Open Source and Git(Hub)",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/02-github/index.html#set-.rprofile-to-check-git-status",
    "href": "slides/02-github/index.html#set-.rprofile-to-check-git-status",
    "title": "Open Source and Git(Hub)",
    "section": "Set .Rprofile to check git status",
    "text": "Set .Rprofile to check git status\nThis is a neat trick (credit: Lisa De Bruine)\nOpen your .Rprofile\nusethis::edit_r_profile()\nand add the following (credit: Lisa De Bruine)\ncat(cli::col_blue(system(\"git status -u no\", TRUE)))\nThis will run git status from the command line when you start R, giving a (blue coloured!) message e.g.\nOn branch main Your branch is behind 'origin/main' by 1 commit,\nand can be fast-forwarded.   (use \"git pull\" to update your  \nlocal branch)  nothing to commit, working tree clean\nIf your main branch is behind the main branch on origin (GitHub), you should pull changes before making new edits."
  },
  {
    "objectID": "slides/02-github/index.html#advanced-amend-commit-before-pushing",
    "href": "slides/02-github/index.html#advanced-amend-commit-before-pushing",
    "title": "Open Source and Git(Hub)",
    "section": "Advanced: Amend commit (before pushing)",
    "text": "Advanced: Amend commit (before pushing)\nSometimes we don’t stage everything we intended to include in a commit, e.g. we committed a file before saving the latest changes.\nIf we haven’t yet pushed the commit to GitHub, simply stage the extra commits and check the “Amend previous commit” box under the commit message.\nThe original commit message will be shown - you can edit this to change the message for the amended commit (useful if you forgot to reference a GitHub issue number)"
  },
  {
    "objectID": "slides/02-github/index.html#advanced-undo-last-commit-before-pushing",
    "href": "slides/02-github/index.html#advanced-undo-last-commit-before-pushing",
    "title": "Open Source and Git(Hub)",
    "section": "Advanced: Undo last commit (before pushing)",
    "text": "Advanced: Undo last commit (before pushing)\nAlternatively, you can undo a commit before pushing.\nTo undo the commit, keeping files as they are\n\ngit reset HEAD~1\n\n(change the 1 to a higher number to go back more than 1 commit).\nTo undo the commit and all the changes in that commit\n\ngit reset --hard HEAD~1\n\nThis goes back to the version at the last commit."
  },
  {
    "objectID": "slides/02-github/index.html#advanced-undo-last-commit-after-pushing",
    "href": "slides/02-github/index.html#advanced-undo-last-commit-after-pushing",
    "title": "Open Source and Git(Hub)",
    "section": "Advanced: Undo last commit (after pushing)",
    "text": "Advanced: Undo last commit (after pushing)\nIt is best practice to create a new commit that undoes the changes. Run\n\ngit revert HEAD\n\nThis edits the files to undo the changes in your last commit. You should then commit these edits, with a relevant message.\nIt is possible to use git reset --hard to undo a commit and then git push origin main --force to force this change onto GitHub. Sometimes repository maintainers do not allow this as it rewrites the history, which can cause problems for people that have cloned or forked your repo."
  },
  {
    "objectID": "slides/02-github/index.html#adding-an-existing-project-to-github",
    "href": "slides/02-github/index.html#adding-an-existing-project-to-github",
    "title": "Open Source and Git(Hub)",
    "section": "Adding an existing project to GitHub",
    "text": "Adding an existing project to GitHub\nThe simplest approach is to create a GitHub repo with just a README as before, create the corresponding RStudio project, copy your files into the new directory, stage and commit them.\nIf you are already using git and want to move the project to GitHub, see Adding a local repository to GitHub using git. Once the project is on GitHub you can clone it into an RStudio project."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Programming 2025",
    "section": "",
    "text": "Welcome to the R Programming workshop for 2025!\nThis course is taking place as part of the University of Warwick’s 2025 Spring Training Week, organised by the SCRPT."
  },
  {
    "objectID": "index.html#syllabus-overview",
    "href": "index.html#syllabus-overview",
    "title": "R Programming 2025",
    "section": "Syllabus overview",
    "text": "Syllabus overview\nThis is an intermediate/advanced level course. Topics we’ll cover include writing functions, error handling and debugging, classes and methods, efficient programming, profiling, C++ and Rcpp, and R tools for working with git/GitHub.\nPlease ensure that you have met the prerequisites before signing up, both in terms of prior R knowledge/experience and software set-up. Note that no prior knowledge of C++ is assumed.\nAll slides and further resources can be accessed from the content page and also via the schedule."
  },
  {
    "objectID": "index.html#session-details",
    "href": "index.html#session-details",
    "title": "R Programming 2025",
    "section": "Session details",
    "text": "Session details\n   Monday March 24th, Tuesday March 25th\n   13:30 – 16:00 (Monday), 10:00 – 16:00 (Tuesday)\n   FAB4.74, Faculty of Arts Building\n   See the full schedule.\nPlease see the join page for more details on how to attend the course."
  },
  {
    "objectID": "index.html#instructor-details",
    "href": "index.html#instructor-details",
    "title": "R Programming 2025",
    "section": "Instructor details",
    "text": "Instructor details\n   Ella Kaye and Heather Turner\n   ella.m.kaye@warwick.ac.uk and h.turner.1@warwick.ac.uk"
  },
  {
    "objectID": "index.html#prerequistes",
    "href": "index.html#prerequistes",
    "title": "R Programming 2025",
    "section": "Prerequistes",
    "text": "Prerequistes\nPlease see the prerequisites page for details on getting set up in advance of the first session."
  },
  {
    "objectID": "slides/06-profiling/index.html#overview",
    "href": "slides/06-profiling/index.html#overview",
    "title": "Profiling",
    "section": "Overview",
    "text": "Overview\n\nProfiling\nprofvis"
  },
  {
    "objectID": "slides/06-profiling/index.html#profiling-code",
    "href": "slides/06-profiling/index.html#profiling-code",
    "title": "Profiling",
    "section": "Profiling code",
    "text": "Profiling code\nTo make our code more efficient, we first need to identify the bottlenecks, in terms of time and/or memory usage.\nProfiling stops the execution of code every few milliseconds and records\n\nThe call stack: the function currently being executed, the function that it was called from and so on up to the top-level function call.\nThe memory allocated and released since the last record.\n\nWe will use the profvis package to visualise profiling results."
  },
  {
    "objectID": "slides/06-profiling/index.html#example-nested-pause-functions",
    "href": "slides/06-profiling/index.html#example-nested-pause-functions",
    "title": "Profiling",
    "section": "Example: nested pause functions",
    "text": "Example: nested pause functions\nThe following code is saved in demos/profiling-example.R and uses profvis::pause() to wait 0.1s inside each function\n\ntop_level &lt;- function() {\n  profvis::pause(0.1)\n  middle_level()\n  bottom_level()\n}\nmiddle_level &lt;- function() {\n  profvis::pause(0.1)\n  bottom_level()\n}\nbottom_level &lt;- function() {\n  profvis::pause(0.1)\n}\n\n\nSys.sleep() can not be used as it would not show in profiling output"
  },
  {
    "objectID": "slides/06-profiling/index.html#using-profvis",
    "href": "slides/06-profiling/index.html#using-profvis",
    "title": "Profiling",
    "section": "Using profvis",
    "text": "Using profvis\nSource the code to be profiled and pass the function call to be profiled to profvis() (this is in demos/profvis-example.R)\n\nlibrary(profvis)\nsource(here::here(\"demos\", \"profiling-example.R\"))\nprofvis(top_level())\n\nAn interactive HTML document will open with the results.\nIn RStudio this will open in the source pane; click “show in new window” button to open the document in a new window."
  },
  {
    "objectID": "slides/06-profiling/index.html#section",
    "href": "slides/06-profiling/index.html#section",
    "title": "Profiling",
    "section": "",
    "text": "Screenshot of the profvis HTML output. At the bottom, a stacked set of horizontal bars along a time axis, representing the length of time in each function. At a given time, the top-level function is at the bottom of the stack with each nested function stacked on top. The source code is shown at the top of the screenshot, with a horizontal bar for each line, showing the time spent. Interpretation on next slide"
  },
  {
    "objectID": "slides/06-profiling/index.html#interpretation",
    "href": "slides/06-profiling/index.html#interpretation",
    "title": "Profiling",
    "section": "Interpretation",
    "text": "Interpretation\nIn the flame graph the yellow bars correspond to lines in the source file shown above the graph. The plot is interactive.\nIn the overall time of 250ms we see:\n\n4 equal-sized blocks for each pause of 0.1s\nNearly all time is spent in the top-level function\nNearly half the time is spent in the mid-level function\nNearly half the time is also spent in the bottom-level function\nThe cmp function is called as R tries to compile new functions so that it can call the compiled version in subsequent calls.\n\nNo objects are created or deleted: no memory changes."
  },
  {
    "objectID": "slides/06-profiling/index.html#data-tab",
    "href": "slides/06-profiling/index.html#data-tab",
    "title": "Profiling",
    "section": "Data tab",
    "text": "Data tab\nThe Data tab shows a table with the memory and time usage for each function call. The nested calls can be expanded/collapsed to show/hide the corresponding lines.\n\nScreenshot of the data tab in the profvis HTML output. A table with columns “Code” (function name), “File” (name of source file containing function), “Memory (MB)” and “Time (ms)”."
  },
  {
    "objectID": "slides/06-profiling/index.html#memory-profiling",
    "href": "slides/06-profiling/index.html#memory-profiling",
    "title": "Profiling",
    "section": "Memory profiling",
    "text": "Memory profiling\nTo illustrate memory profiling we can consider a loop that concatenates values.\nAs it is a small code snippet, we can pass to profvis() directly\n\nprofvis({\n  x &lt;- integer()\n  for (i in 1:10000) {\n    x &lt;- c(x, i)\n  }\n})"
  },
  {
    "objectID": "slides/06-profiling/index.html#section-1",
    "href": "slides/06-profiling/index.html#section-1",
    "title": "Profiling",
    "section": "",
    "text": "Flame graph for profiling the contenation example. Interpretation on next slide."
  },
  {
    "objectID": "slides/06-profiling/index.html#gc",
    "href": "slides/06-profiling/index.html#gc",
    "title": "Profiling",
    "section": "<GC>",
    "text": "&lt;GC&gt;\nAs expected, the majority of the time is spent within c(), but we also see a lot time spent in &lt;GC&gt;, the garbage collector.\nIn the memory column next to the corresponding line in the source code, we see a bar to left labelled -123.0 and a bar to the right labelled 137.2. This means that 137 MB of memory was allocated and 123 MB of memory was released.\nEach call to c() causes a new copy of x to be created.\nMemory profiling can help to identify short-lived objects that might be avoided by changes to the code."
  },
  {
    "objectID": "slides/06-profiling/index.html#monopoly",
    "href": "slides/06-profiling/index.html#monopoly",
    "title": "Profiling",
    "section": "Monopoly",
    "text": "Monopoly\n\n\nIn the game of Monopoly, players roll two die to move round the board. Players buy assets on which they can charge rent or taxes and aim to make the most money.\nThe squares on the board represent\n\n\n\n\nProperties, train stations or utility companies to buy\nEvents that trigger an action, e.g. paying a tax or going to jail\n\nThe efficient package contains the simulate_monopoly() function to simulate game play; we’ll use this to practice profiling."
  },
  {
    "objectID": "slides/06-profiling/index.html#your-turn",
    "href": "slides/06-profiling/index.html#your-turn",
    "title": "Profiling",
    "section": "Your turn!",
    "text": "Your turn!\n\nInstall the efficient package with the following code to keep the code source files:\n\n\nremotes::install_github(\"csgillespie/efficient\",\n                         INSTALL_opts = \"--with-keep.source\")\n\n\nUse profvis() to profile simulate_monopoly(10000). Explore the output. Which parts of the code are slow?\nMost of the time is spent in the function move_square(). Use View(move_square) to view the source code. Copy the code to a new .R file and rename the function move_square2. Edit move_square2() to speed up the slow parts of the code. (Go to next slide for testing the updates)"
  },
  {
    "objectID": "slides/06-profiling/index.html#your-turn-continued",
    "href": "slides/06-profiling/index.html#your-turn-continued",
    "title": "Profiling",
    "section": "Your turn! (continued)",
    "text": "Your turn! (continued)\nCreate a wrapper to run a specified move square function n times with different seeds:\n\nrun &lt;- function(n, fun){\n  x &lt;- numeric(n)\n  for (i in seq_len(n)) {\n    set.seed(i)\n    x[i] &lt;- fun(1)\n  }\n  x\n}\n\nRun bench::mark(run(n, move_square), run(n, move_square2)) with n = 1000 to test your changes.\nFinally, compare profvis(run(n, move_square)) with profvis(run(n, move_square2))."
  },
  {
    "objectID": "slides/06-profiling/index.html#general-principles",
    "href": "slides/06-profiling/index.html#general-principles",
    "title": "Profiling",
    "section": "General principles",
    "text": "General principles\n\nAvoid optimizing too soon\n\nGet the code right first\n\nAvoid over-optimization\n\nFocus on the bottlenecks\nKeep an eye on the units - will real gains be made?\nThink about maintainability: readability, simplicity, dependencies\n\nAvoid anonymous functions\n\nName utility functions to see them in the profile\n\nUse benchmarking to assess alternative implementations"
  },
  {
    "objectID": "slides/06-profiling/index.html#c-and-rcpp",
    "href": "slides/06-profiling/index.html#c-and-rcpp",
    "title": "Profiling",
    "section": "C++ and Rcpp",
    "text": "C++ and Rcpp\nIn the next session, we’ll cover using C++ via Rcpp to rewrite R code that has been identified through profiling as causing bottlenecks in your code."
  },
  {
    "objectID": "slides/06-profiling/index.html#references",
    "href": "slides/06-profiling/index.html#references",
    "title": "Profiling",
    "section": "References",
    "text": "References\n\nWickham, H, Advanced R (2nd edn), Improving performance section\nhttps://adv-r.hadley.nz/perf-improve.html\nGillespie, C and Lovelace, R, Efficient R programming\nhttps://csgillespie.github.io/efficientR/"
  },
  {
    "objectID": "slides/06-profiling/index.html#license",
    "href": "slides/06-profiling/index.html#license",
    "title": "Profiling",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/01-welcome/index.html#instructors",
    "href": "slides/01-welcome/index.html#instructors",
    "title": "Welcome and Introduction",
    "section": "Instructors",
    "text": "Instructors\n\n\nElla Kaye\n\n\nResearch Software Engineer\nDepartment of Statistics\nUniversity of Warwick\nhttps://warwick.ac.uk/ellakaye\n\n\nHeather Turner\n\n\nRSE Fellow\nDepartment of Statistics\nUniversity of Warwick\nhttps://warwick.ac.uk/heatherturner"
  },
  {
    "objectID": "slides/01-welcome/index.html#course-material",
    "href": "slides/01-welcome/index.html#course-material",
    "title": "Welcome and Introduction",
    "section": "Course material",
    "text": "Course material\n\nWebsite and slides\nhttps://Warwick-Stats-Resources.github.io/r-programming-2025\nWebsite and slides repo\nhttps://github.com/Warwick-Stats-Resources/r-programming-2025\nExercises and additional material\nhttps://github.com/Warwick-Stats-Resources/Advanced-R-exercises"
  },
  {
    "objectID": "slides/01-welcome/index.html#schedulue-monday-march-24th",
    "href": "slides/01-welcome/index.html#schedulue-monday-march-24th",
    "title": "Welcome and Introduction",
    "section": "Schedulue: Monday March 24th",
    "text": "Schedulue: Monday March 24th\n\n\n\n\nTime\nSession\nInstructor\n\n\n\n\n13:30–13:40\nWelcome and Introduction\nElla Kaye, Heather Turner\n\n\n13:40–14:20\nOpen Source and Git(Hub)\nElla Kaye\n\n\n14:20–14:35\nBreak\n\n\n\n14:35–16:00\nFunctions\nHeather Turner"
  },
  {
    "objectID": "slides/01-welcome/index.html#schedule-tuesday-march-25th",
    "href": "slides/01-welcome/index.html#schedule-tuesday-march-25th",
    "title": "Welcome and Introduction",
    "section": "Schedule: Tuesday March 25th",
    "text": "Schedule: Tuesday March 25th\n\n\n\n\nTime\nSession\nInstructor\n\n\n\n\n10:00–11:15\nClasses and Methods\nElla Kaye\n\n\n11:15–11:30\nBreak\n\n\n\n11:30–12:30\nEfficient Programming\nElla Kaye\n\n\n12:30–13:30\nLunch break\n\n\n\n13:30–14:15\nProfiling\nElla Kaye\n\n\n14:15–14:30\nCoffee break\n\n\n\n14:30–16:00\nC++ and Rcpp\nHeather Turner"
  },
  {
    "objectID": "slides/03-functions/index.html#overview",
    "href": "slides/03-functions/index.html#overview",
    "title": "Functions",
    "section": "Overview",
    "text": "Overview\n\nFunctions basics\nBeyond the basics\nError handling"
  },
  {
    "objectID": "slides/03-functions/index.html#components-of-a-function",
    "href": "slides/03-functions/index.html#components-of-a-function",
    "title": "Functions",
    "section": "Components of a function",
    "text": "Components of a function\nFunctions are defined by three components:\n\nthe name of the function\nthe arguments of the function, inside ( )\nthe body of the function that computes the result, inside { }\n\nThey are created using function()\n\nt_statistic &lt;- function(n) {\n  x &lt;- rnorm(n)\n  y &lt;- rnorm(n)\n  t.test(x, y)$statistic\n}"
  },
  {
    "objectID": "slides/03-functions/index.html#naming-functions",
    "href": "slides/03-functions/index.html#naming-functions",
    "title": "Functions",
    "section": "Naming functions",
    "text": "Naming functions\nFunction names are important:\n\nuse a name that describes what it returns (e.g. t_statistic) or what it does (e.g. remove_na)\ntry to use one convention for combining words (e.g. snake case t_statistic or camel case tStatistic)\navoid using the same name as other functions"
  },
  {
    "objectID": "slides/03-functions/index.html#specified-arguments",
    "href": "slides/03-functions/index.html#specified-arguments",
    "title": "Functions",
    "section": "Specified arguments",
    "text": "Specified arguments\nspecified arguments are those named in the function definition, e.g.  in rnorm()\n\nargs(rnorm)\n\nfunction (n, mean = 0, sd = 1) \nNULL\n\n\nthe arguments are n, mean and sd.\nmean and sd have been given default values in the function definition, but n has not, so the function fails if the user does not pass a value to n\n\nrnorm()\n\nError in rnorm(): argument \"n\" is missing, with no default"
  },
  {
    "objectID": "slides/03-functions/index.html#name-and-order-of-arguments",
    "href": "slides/03-functions/index.html#name-and-order-of-arguments",
    "title": "Functions",
    "section": "Name and order of arguments",
    "text": "Name and order of arguments\nThe user can pass objects to these arguments using their names or by supplying unnamed values in the right order\n\nrnorm(5, 1, 10)\n\n[1] -2.909228  2.890470 -3.051592 -4.061013  6.377595\n\nrnorm(5, sd = 10)\n\n[1] -7.1335327 -8.9193327 -0.4849698  8.6930853  5.4797383\n\n\nSo naming and order is important! Some guidelines\n\nput compulsory arguments first, e.g. data\nput rarely used arguments last, e.g. tolerance setting\nuse short but meaningful argument names\nif relevant, use the same argument names as similar functions"
  },
  {
    "objectID": "slides/03-functions/index.html#return-values-single",
    "href": "slides/03-functions/index.html#return-values-single",
    "title": "Functions",
    "section": "Return values (single)",
    "text": "Return values (single)\nBy default, functions return the object created by the last line of code\n\nf &lt;- function(x) {\n  x &lt;- x + 1\n  log(x)\n}\n\nAlternatively return() can be used to terminate the function and return a given object\n\nf &lt;- function(x) {\n    if (all(x &gt; 0)) return(log(x))\n    x[x &lt;= 0] &lt;- 0.1\n    log(x)\n}"
  },
  {
    "objectID": "slides/03-functions/index.html#return-values-multiple",
    "href": "slides/03-functions/index.html#return-values-multiple",
    "title": "Functions",
    "section": "Return values (multiple)",
    "text": "Return values (multiple)\nMultiple objects can be returned in a list:\n\nmean_and_sd &lt;- function(x) {\n  res_mean &lt;- mean(x, na.rm = TRUE)\n  res_sd &lt;- sd(x)\n  \n  list(mean = res_mean,\n       sd = res_sd)\n}\n\nx &lt;- 1:3\nmean_and_sd(x)\n\n$mean\n[1] 2\n\n$sd\n[1] 1"
  },
  {
    "objectID": "slides/03-functions/index.html#multiple-return-values-different-types",
    "href": "slides/03-functions/index.html#multiple-return-values-different-types",
    "title": "Functions",
    "section": "Multiple return values, different types",
    "text": "Multiple return values, different types\n\nsymmetric_sums &lt;- function(mat) {\n  sym_mat &lt;- mat + t(mat)\n  sum &lt;- sum(sym_mat)\n  list(sym_mat = sym_mat, sum = sum)\n}\nmat &lt;- matrix(1:9, 3, 3)\nsymmetric_sums(mat)\n\n$sym_mat\n     [,1] [,2] [,3]\n[1,]    2    6   10\n[2,]    6   10   14\n[3,]   10   14   18\n\n$sum\n[1] 90"
  },
  {
    "objectID": "slides/03-functions/index.html#rstudio-helper",
    "href": "slides/03-functions/index.html#rstudio-helper",
    "title": "Functions",
    "section": "RStudio helper",
    "text": "RStudio helper\nRStudio has a helper to turn code into a function:\n\nSelect the lines of code that will become the body of the function.\nSelect Code &gt; Extract Function from the menu.\nEnter the name of the new function in the dialog box.\nEdit the arguments if required.\nAdd/edit the last line to specify the return value."
  },
  {
    "objectID": "slides/03-functions/index.html#exercise-files",
    "href": "slides/03-functions/index.html#exercise-files",
    "title": "Functions",
    "section": "Exercise files",
    "text": "Exercise files\nhttps://github.com/Warwick-Stats-Resources/Advanced-R-exercises\n\nYou can get the files by creating a new project from version control in RStudio (if set up, as per the previous session)\nBy going to the ‘Code’ button in the repo, then ‘Download ZIP’, then opening Advanced-R-exercises.Rproj.\n\n\n\n\n\n\n\nNote\n\n\nWe will be using R markdown in the next exercise.\nGet show of hands for who is not familiar with this and give demo with exercise 1 if need be."
  },
  {
    "objectID": "slides/03-functions/index.html#exercise-1",
    "href": "slides/03-functions/index.html#exercise-1",
    "title": "Functions",
    "section": "Exercise 1",
    "text": "Exercise 1\nIn the qq_norm chunk of exercises.Rmd there is some code to compute the slope and intercept of the line to add to a quantile-quantile plot, comparing sample quantiles against theoretical quantiles of a N(0, 1) distribution.\nTurn this code into a function named qq_norm taking the sample data as an argument and returning the slope and intercept in a list.\nRun this chunk to source the function, then run the normal-QQ chunk which uses the qq_norm function to compute parameters for an example plot."
  },
  {
    "objectID": "slides/03-functions/index.html#function-environment",
    "href": "slides/03-functions/index.html#function-environment",
    "title": "Functions",
    "section": "Function environment",
    "text": "Function environment\nArguments are used as objects in the function code.\nA new environment is created each time the function is called, separate from the global workspace.\n\nx &lt;- 1\ny &lt;- 3\nf &lt;- function(x, y){\n  a &lt;- 1\n  x &lt;- x + a\n  x + y\n}\nf(x, y)\n\n[1] 5\n\nx\n\n[1] 1\n\na\n\nError in eval(expr, envir, enclos): object 'a' not found"
  },
  {
    "objectID": "slides/03-functions/index.html#lexical-scoping",
    "href": "slides/03-functions/index.html#lexical-scoping",
    "title": "Functions",
    "section": "Lexical scoping",
    "text": "Lexical scoping\nIf an object is not defined within the function, or passed in as an argument, R looks for it in the parent environment where the function was defined\n\nx &lt;- 1\ny &lt;- 3\nf &lt;- function(x){\n  x + y\n}\nf(x)\n\n[1] 4\n\nrm(y)\nf(x)\n\nError in f(x): object 'y' not found\n\n\nIt is safest (and best practice) to use arguments rather than depend on global variables!"
  },
  {
    "objectID": "slides/03-functions/index.html#unspecified-arguments",
    "href": "slides/03-functions/index.html#unspecified-arguments",
    "title": "Functions",
    "section": "Unspecified arguments",
    "text": "Unspecified arguments\n... (the ellipsis) allow unspecified arguments to be passed to the function.\nThis device is used by functions that work with arbitrary numbers of objects, e.g. \n\nargs(sum)\n\nfunction (..., na.rm = FALSE) \nNULL\n\nsum(1, 4, 10, 2)\n\n[1] 17\n\n\nIt can also be used to pass on arguments to another function, e.g.\n\nt_statistic &lt;- function(x, g, ...) {\n  t.test(x ~ g, ...)$stat\n}"
  },
  {
    "objectID": "slides/03-functions/index.html#using-...",
    "href": "slides/03-functions/index.html#using-...",
    "title": "Functions",
    "section": "Using ...",
    "text": "Using ...\nArguments passed to ... can be collected into a list for further analysis\n\nmeans &lt;- function(...){\n  dots &lt;- list(...)\n  vapply(dots, mean, numeric(1), na.rm = TRUE)\n}\nx &lt;- 1\ny &lt;- 2:3\nmeans(x, y)\n\n[1] 1.0 2.5\n\n\nSimilarly the objects could be concatenated using c()"
  },
  {
    "objectID": "slides/03-functions/index.html#side-effects",
    "href": "slides/03-functions/index.html#side-effects",
    "title": "Functions",
    "section": "Side effects",
    "text": "Side effects\nA side-effect is a change outside the function that occurs when the function is run, e.g.\n\nplot to the graphics window or other device\nprinting output to the console\nwrite data to a file\n\nA function can have many side-effects and a return value, but it is best practice to have a separate function for each task, e.g creating a plot or a table.\nWriting to file is usually best done outside a function."
  },
  {
    "objectID": "slides/03-functions/index.html#exercise-2",
    "href": "slides/03-functions/index.html#exercise-2",
    "title": "Functions",
    "section": "Exercise 2",
    "text": "Exercise 2\nCopy your qq_norm function to the qq chunk and rename it qq.\nAdd a new argument qfun to specify any quantile function (e.g. qt, qf, etc). Give it the default value qnorm.\nIn the body of qq, use qfun instead of qnorm to compute q_theory. Use ... to pass on arguments to qfun.\nRun the qq chunk and test your function on the t-QQ chunk."
  },
  {
    "objectID": "slides/03-functions/index.html#using-functions-from-other-packages",
    "href": "slides/03-functions/index.html#using-functions-from-other-packages",
    "title": "Functions",
    "section": "Using functions from other packages",
    "text": "Using functions from other packages\nIn our own functions (outside of packages), it is possible to use library\n\nscale_rows &lt;- function(X){\n  library(matrixStats)\n  X &lt;- X - rowMeans(X)\n  X/rowSds(X)\n}\n\nBut this loads the entire package, potentially leading to clashes with functions from other packages. It is better to use the import package:\n\nscale_rows &lt;- function(X){\n  import::from(matrixStats, rowSds)\n  X &lt;- X - rowMeans(X)\n  X/rowSds(X)\n}\nscale_rows(matrix(1:12, nrow = 3))\n\n\nThen in our script we don’t need to use library(matrixStats) for rowSds to work (it must be installed though)!"
  },
  {
    "objectID": "slides/03-functions/index.html#custom-ggplot",
    "href": "slides/03-functions/index.html#custom-ggplot",
    "title": "Functions",
    "section": "Custom ggplot",
    "text": "Custom ggplot\nggplot2, like dplyr and other tidyverse packages, uses non-standard evaluation, that is, it refers to variable names in a data frame as if they were objects in the current environment\n\nggplot(mtcars, aes(x = mpg, y= disp)) +\n  geom_point()\n\nTo emulate this, we have to need to embrace arguments\n\nggscatter &lt;- function(data, x, y){\n  import::from(ggplot2, ggplot, aes, geom_point)\n  ggplot(data, aes(x = {{ x }}, y = {{ y }})) +\n    geom_point()\n}\nggscatter(mtcars, x = mpg, y = disp)"
  },
  {
    "objectID": "slides/03-functions/index.html#externalizing-function-code",
    "href": "slides/03-functions/index.html#externalizing-function-code",
    "title": "Functions",
    "section": "Externalizing function code",
    "text": "Externalizing function code\nIt is a good idea to separate function code from analysis code.\nPut related functions together and source as required\n\nsource(\"modelFunctions.R\")\nsource(\"plotFunctions.R\")\n\nThe import package enables only necessary, top-level functions to be imported to the global workspace:\n\nimport::here(poissonModel, quasiPoissonModel, .from = \"modelFunctions.R\")\n\nIn either case, import::from commands can be put outside the function body to make the code easier to read."
  },
  {
    "objectID": "slides/03-functions/index.html#sanity-checks",
    "href": "slides/03-functions/index.html#sanity-checks",
    "title": "Functions",
    "section": "Sanity checks",
    "text": "Sanity checks\nTo avoid mistakes, you may want to add some basic sanity checks\n\nlogit &lt;- function(p){\n  stopifnot(p &gt; 0 & p &lt; 1)\n  log(p/(1 - p))\n}\nlogit(2)\n\nError in logit(2): p &gt; 0 & p &lt; 1 is not TRUE\n\nlogit(0.5)\n\n[1] 0"
  },
  {
    "objectID": "slides/03-functions/index.html#error-messages",
    "href": "slides/03-functions/index.html#error-messages",
    "title": "Functions",
    "section": "Error messages",
    "text": "Error messages\nOften the R messages can be quite obscure\n\nzap &lt;- function(x) if (max(x) &lt; 1e7) 0 else x\nx &lt;- c(1, 2, NA)\nzap(x)\n\nError in if (max(x) &lt; 1e+07) 0 else x: missing value where TRUE/FALSE needed\n\n\nMore helpful error message can be implemented using stop\n\nzap &lt;- function(x) {\n  if (any(is.na(x))) stop(\"missing values in x\\nare\", \n                          \" not allowed\")\n  if (max(x) &lt; 1e7) 0 else x\n}\nzap(x)\n\nError in zap(x): missing values in x\nare not allowed"
  },
  {
    "objectID": "slides/03-functions/index.html#warning-messages",
    "href": "slides/03-functions/index.html#warning-messages",
    "title": "Functions",
    "section": "Warning messages",
    "text": "Warning messages\nWarning messages should be given using warning()\n\nsafe_log2 &lt;- function(x) {\n  if (any(x == 0)) {\n    x[x == 0] &lt;- 0.1\n    warning(\"zeros replaced by 0.1\")\n  }\n  log(x, 2)\n}\nsafe_log2(0:1)\n\n[1] -3.321928  0.000000\n\n\nOther messages can be printed using message()."
  },
  {
    "objectID": "slides/03-functions/index.html#suppressing-warnings",
    "href": "slides/03-functions/index.html#suppressing-warnings",
    "title": "Functions",
    "section": "Suppressing warnings",
    "text": "Suppressing warnings\nIf a warning is expected, you may wish to suppress it\n\nlog(c(3, -1))\n\n[1] 1.098612      NaN\n\nx &lt;- suppressWarnings(log(c(3, -1)))\n\nAll warnings will be suppressed however!\nSimilarly suppressMessages() will suppress messages."
  },
  {
    "objectID": "slides/03-functions/index.html#catching-errorswarnings",
    "href": "slides/03-functions/index.html#catching-errorswarnings",
    "title": "Functions",
    "section": "Catching errors/warnings",
    "text": "Catching errors/warnings\nThe purrr package has various functions to catch issues.\npossibly() lets you modify a function to return a specified value when there is an error\n\nlog(\"a\")\n\nError in log(\"a\"): non-numeric argument to mathematical function\n\nlibrary(purrr)\nposs_log &lt;- possibly(log, otherwise = NA)\nposs_log(\"a\")\n\n[1] NA\n\n\nsafely() works in a similar way but returns a list with elements \"result\" and \"error\", so you can record the error message(s).\nquietly() lets you modify a function to return printed output, warnings and messages along with the result."
  },
  {
    "objectID": "slides/03-functions/index.html#traceback",
    "href": "slides/03-functions/index.html#traceback",
    "title": "Functions",
    "section": "traceback()",
    "text": "traceback()\nWhen an unexpected error occurs, there are several ways to track down the source of the error, e.g. traceback()\n\nf1 &lt;- function(x){ f2(x) }\nf2 &lt;- function(x){ x + qqqq }\nf1(10)\n\nError in f2(x): object 'qqqq' not found\n\n\n\ntraceback()\n\n\n\n2: f2(x) at #1\n1: f1(10)"
  },
  {
    "objectID": "slides/03-functions/index.html#traceback-in-rstudio",
    "href": "slides/03-functions/index.html#traceback-in-rstudio",
    "title": "Functions",
    "section": "traceback() in RStudio",
    "text": "traceback() in RStudio\nIn RStudio, if Debug &gt; On Error &gt;  Error Inspector is checked and the traceback has at least 3 calls, the option to show traceback is presented\n\nf1 &lt;- function(x){ f2(x) }\nf2 &lt;- function(x){ f3(x) }\nf3 &lt;- function(x){ x + qqqq }\nf1(10)\n\nError in f3(x): object 'qqqq' not found\n\n\n\nRStudio error inspector giving options to show traceback or rerun with debug\nNote here about the importance of separating tasks into smaller functions - easier to debug!"
  },
  {
    "objectID": "slides/03-functions/index.html#debugonce",
    "href": "slides/03-functions/index.html#debugonce",
    "title": "Functions",
    "section": "debugonce()",
    "text": "debugonce()\ndebugonce() flags a function for debugging the next time it is called\n\ndebugonce(f2)\nf1(10)\n\nError in f3(x): object 'qqqq' not found\n\n\n\n\ndebugging in: f2(x)\ndebug at #1: {\n    x + qqqq\n}\nBrowse[2]&gt; ls()\n[1] \"x\"\nBrowse[2]&gt; x\n[1]&gt; 10\n\n\nWhen in debug mode type n or ↵ to step to the next line and c to continue to the end of a loop or the end of the function. Q quits the debugger."
  },
  {
    "objectID": "slides/03-functions/index.html#breakpoints",
    "href": "slides/03-functions/index.html#breakpoints",
    "title": "Functions",
    "section": "Breakpoints",
    "text": "Breakpoints\nStepping through a function line by line can be tedious. In RStudio we can set custom breakpoints in the source pane\n\n\nSet breakpoint in RStudio \n\nSource the code"
  },
  {
    "objectID": "slides/03-functions/index.html#start-debugging-from-breakpoints",
    "href": "slides/03-functions/index.html#start-debugging-from-breakpoints",
    "title": "Functions",
    "section": "Start debugging from breakpoints",
    "text": "Start debugging from breakpoints\n\n\nn is automatically printed, so the first prompt is at the breakpoint"
  },
  {
    "objectID": "slides/03-functions/index.html#rstudios-rerun-with-debug",
    "href": "slides/03-functions/index.html#rstudios-rerun-with-debug",
    "title": "Functions",
    "section": "RStudio’s Rerun with Debug",
    "text": "RStudio’s Rerun with Debug\nThe Rerun with Debug option will rerun the command that created the error and enter debug mode where the error occurred.\nGood points:\n\nEasy to enter debug mode (when option shown)\nCan click in Traceback pane to view objects at any point in the call stack\n\nBad points:\n\nMay have gone past source of error (use breakpoints instead)\nMay enter deeply nested function: use recover() to select an earlier entry point\n\nAlternatively use options(error = recover), run code to debug, then set options(error = NULL)."
  },
  {
    "objectID": "slides/03-functions/index.html#exercise-3",
    "href": "slides/03-functions/index.html#exercise-3",
    "title": "Functions",
    "section": "Exercise 3",
    "text": "Exercise 3\nOpen debug_practice.R and source the function f().\nTry to run f(10) - there’s an error! Use traceback() to see which function call generated the error, then fix the problem.\nRun f(10) again - there is another error! Can you fix this directly given the error message?\nTry running f(1) - is the result what you expected? Use debugonce() to set debugging on f() and re-run f(1). Step through the function, printing each object as it is created to see what is happening.\nCan you think how to improve the function? See if you can modify the function to give a sensible result for any integer.\n\nWon’t have seen apply in this course yet - that’s covered in Session 4. Maybe they’ll already know it, otherwise instructor can help, or point towards ?apply\nShow how traceback works, and show View(apply) to show that’s where the call to match.fun occurs."
  },
  {
    "objectID": "slides/03-functions/index.html#references",
    "href": "slides/03-functions/index.html#references",
    "title": "Functions",
    "section": "References",
    "text": "References\n\nFunctions chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/functions.html\nDebugging chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/debugging.html\nDebugging from the RStudio User Guide\nhttps://docs.posit.co/ide/user/ide/guide/code/debugging.html"
  },
  {
    "objectID": "slides/03-functions/index.html#license",
    "href": "slides/03-functions/index.html#license",
    "title": "Functions",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/03-functions/index.html#documenting-functions",
    "href": "slides/03-functions/index.html#documenting-functions",
    "title": "Functions",
    "section": "Documenting functions",
    "text": "Documenting functions\nComments help to record what a function does\n\n# reorder x by grouping variable g\ngroupSort &lt;- function(x, g) {\n  ord &lt;- order(g) #indices for ascending order of g\n  x[ord]\n}\n\nThe docstring package enables roxygen comments to be turned into a help file\n\nlibrary(docstring)\ngroupSort &lt;- function(x, g) {\n  #' Reorder a Vector by a Grouping Variable\n  #'\n  #' @param x a vector\n  #' @param g a grouping variable\n  ord &lt;- order(g) #indices for ascending order of g\n  x[ord]\n}"
  },
  {
    "objectID": "slides/03-functions/index.html#view-the-help-file-as-usual",
    "href": "slides/03-functions/index.html#view-the-help-file-as-usual",
    "title": "Functions",
    "section": "View the help file as usual",
    "text": "View the help file as usual\n\n?groupSort\n\n\nHTML documentation generated by docstringFor fuller documentation, see the docstring vignette.\nADD LINK TO VIGNETTE"
  },
  {
    "objectID": "slides/03-functions/index.html#roxygen",
    "href": "slides/03-functions/index.html#roxygen",
    "title": "Functions",
    "section": "roxygen",
    "text": "roxygen\nADD A SLIDE WITH SOME RESOURCES ABOUT ROXYGEN"
  },
  {
    "objectID": "slides/03-functions/index.html#validation",
    "href": "slides/03-functions/index.html#validation",
    "title": "Functions",
    "section": "Validation",
    "text": "Validation\nWhen developing a function, we will want to validate its output.\nA simple approach is to try different inputs\n\nlog_2 &lt;- function(x){\n  log(x, 2)\n}\nlog_2(2^2)\n\n[1] 2\n\nlog_2(2^0)\n\n[1] 0\n\n\nDoing this each time we change the function becomes tedious to check and error-prone as we miss important tests."
  },
  {
    "objectID": "slides/03-functions/index.html#unit-testing",
    "href": "slides/03-functions/index.html#unit-testing",
    "title": "Functions",
    "section": "Unit testing",
    "text": "Unit testing\nThe testthat packages allows us to create a test suite:\nADD LINK\n\ncontext(\"log_2 works correctly\")\n\ntest_that(\"log_2 returns log to base 2\", {\n  expect_equal(log_2(2^3), 3)\n  expect_equal(log_2(2^0), 0)\n})\n\ntest_that(\"negative values give error\", {\n  expect_error(log_2(2^-1))\n})"
  },
  {
    "objectID": "slides/03-functions/index.html#running-tests",
    "href": "slides/03-functions/index.html#running-tests",
    "title": "Functions",
    "section": "Running tests",
    "text": "Running tests\nIf we save the tests in a file, e.g. tests.R, we can use test_file() to run and check all tests:\n\nlibrary(testthat)\ntest_file(\"tests.R\")\n\n\n\n√ | OK F W S | Context\nx |  2 1     | log_2 works correctly\n--------------------------------------------------------------------------------\ntests.R:9: failure: negative values give error\n`log_2(2^-1)` did not throw an error.\n--------------------------------------------------------------------------------\n\n== Results =====================================================================\nOK:       2\nFailed:   1\nWarnings: 0\nSkipped:  0"
  },
  {
    "objectID": "slides/03-functions/index.html#your-turn",
    "href": "slides/03-functions/index.html#your-turn",
    "title": "Functions",
    "section": "Your turn!",
    "text": "Your turn!\nCopy the qq function to a new R script and save as functions.R. Add roxygen comments at the start of the function body to define a title and parameter documentation.\nRun the documentation chunk of exercises.Rmd to view your documentation.\nOpen the tests.R script. Using expect_equal add some tests for the following\n\na sample of 100,000 from N(0, 1) gives approximately slope 1, intercept 0\na sample of 100,000 from N(0, 1/2) gives approximately slope 2, intercept 0\nsample of 100,000 from N(2, 1) gives approximately slope 1, intercept -2\n\nUse the tol argument in expect_equal to set a tolerance of 0.01.\nRun the tests chunk of exercises.Rmd to run your tests with test_file. Try changing the expected tolerance to get a test to fail."
  },
  {
    "objectID": "content/06-profiling/index.html",
    "href": "content/06-profiling/index.html",
    "title": "Profiling",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/06-profiling/index.html#slides",
    "href": "content/06-profiling/index.html#slides",
    "title": "Profiling",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-welcome/index.html",
    "href": "content/01-welcome/index.html",
    "title": "Welcome and Introduction",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-welcome/index.html#slides",
    "href": "content/01-welcome/index.html#slides",
    "title": "Welcome and Introduction",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-functions/index.html",
    "href": "content/03-functions/index.html",
    "title": "Functions",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-functions/index.html#slides",
    "href": "content/03-functions/index.html#slides",
    "title": "Functions",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-functions/index.html#resources",
    "href": "content/03-functions/index.html#resources",
    "title": "Functions",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nFunctions chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/functions.html\nDebugging chapter from Advanced R, Hadley Wickham\nhttps://adv-r.hadley.nz/debugging.html\nDebugging from the RStudio User Guide\nhttps://docs.posit.co/ide/user/ide/guide/code/debugging.html"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Monday March 24th, 2025\n\n\n\n\n\n\n\n\nTime\nSession\nInstructor\n\n\n\n\n13:30–13:40\nWelcome and Introduction\nElla Kaye, Heather Turner\n\n\n13:40–14:20\nOpen Source and Git(Hub)\nElla Kaye\n\n\n14:20–14:35\nBreak\n\n\n\n14:35–16:00\nFunctions\nHeather Turner\n\n\n\n\n\nTuesday March 25th, 2025\n\n\n\n\n\n\n\n\nTime\nSession\nInstructor\n\n\n\n\n10:00–11:15\nClasses and Methods\nElla Kaye\n\n\n11:15–11:30\nBreak\n\n\n\n11:30–12:30\nEfficient Programming\nElla Kaye\n\n\n12:30–13:30\nLunch break\n\n\n\n13:30–14:15\nProfiling\nElla Kaye\n\n\n14:15–14:30\nCoffee break\n\n\n\n14:30–16:00\nC++ and Rcpp\nHeather Turner"
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "This is an intermediate/advanced R course, so basic knowledge of R is expected.\nThe first three sessions of Warwick-Stats-Resources R Foundations course covers the required material:\n\nIntroduction to R and RStudio\nData Wrangling\nProgramming in R"
  },
  {
    "objectID": "prerequisites.html#prior-knowledge",
    "href": "prerequisites.html#prior-knowledge",
    "title": "Prerequisites",
    "section": "",
    "text": "This is an intermediate/advanced R course, so basic knowledge of R is expected.\nThe first three sessions of Warwick-Stats-Resources R Foundations course covers the required material:\n\nIntroduction to R and RStudio\nData Wrangling\nProgramming in R"
  },
  {
    "objectID": "prerequisites.html#git-and-github",
    "href": "prerequisites.html#git-and-github",
    "title": "Prerequisites",
    "section": "git and GitHub",
    "text": "git and GitHub\nPlease ensure you have:\n\ngit installed on your computer. See https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\na GitHub account\na GitHub PAT configured to work with RStudio – the vignette from the usethis package on Managing Git(Hub) Credentials goes through this."
  },
  {
    "objectID": "prerequisites.html#r-and-rstudio",
    "href": "prerequisites.html#r-and-rstudio",
    "title": "Prerequisites",
    "section": "R and RStudio",
    "text": "R and RStudio\nPlease ensure that you have the latest versions of R and RStudio installed prior to the first session. Currently, that’s R-4.4.3 and RStudio-2024.12.1.\nWe also strongly recommend all participants to install the development tools to avoid potential issues installing packages.\n\nInstalling R\nDownload the pre-compiled binary for your OS from https://cloud.r-project.org/ and install. More specifically:\nFor Windows\nClick “Download R for Windows”, then “base”, then “Download R-4.4.3 for Windows”. This will download an .exe file; once downloaded, open to start the installation.\nFor Mac\nClick “Download R for macOS”, then “R-4.4.3-arm64.pkg” (the first option) to download the installer for Macs with Apple Silicon chips or “R-4.4.3-x86_64.pkg” (the second option) to download the installer for Macs with Intel chips. Run the installer to complete installation.\nFor Linux\nClick “Download R for Linux”. Instructions on installing are given for Debian, Fedora, Redhat, Suse and Ubuntu distributions. Where there is a choice, install both r-base and r-base-dev.\n\n\nInstalling R Studio Desktop (Open Source Edition)\nDownloads are available from https://posit.co/download/rstudio-desktop/\nDownload the relevant installer either under the “Install RStudio” header or, scrolling down the page, from the ‘All installers and Tarballs’ section. Run the installer to complete installation.\nFor Windows with no admin rights\nDownload the .zip source archive under “Zip/Tarballs”. Extract the files to a folder where you have write access, e.g. C:\\Users\\username\\RStudio. In this folder, open the bin directory and find the RStudio program: it is named rstudio.exe, but the file extension will typically be hidden, so look for rstudio. Right-click this executable to create a desktop shortcut. Double-click the executable or use the shortcut to open.\nFor all other operating systems\nDownload the relevant installer for your OS listed under “Installers for Supported Platforms”. Run the installer to complete installation.\n\n\nDevelopment Tools\nSome additional tools may be required to compile R packages from source.\nFor Windows with no admin rights\nDownload the latest (recommended) Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer keeping the default settings.\nFor Windows with admin rights\nDownload the latest Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer making the following selections: keep the default settings for the installation location and components to install; check the box to add rtools to the system PATH.\nFor Mac\nInstall XCode. Either:\n\nDownload and install XCode from the Mac AppStore: http://itunes.apple.com/us/app/xcode/id497799835?mt=12\nWithin XCode go to Preferences : Downloads and install the Command Line Tools\n\nOr for a smaller download size:\n\nRegister as an Apple Developer (free) here: https://developer.apple.com/programs/enroll/\nDownload the Command Line Tools for XCode appropriate for the version of OS X you are running from here: https://developer.apple.com/downloads/\n\nFor Linux\nIf you installed r-base-dev, when installing R, you should have all you need to build packages from source. Otherwise return to the instructions for installing R for your distribution and follow the instructions there to install the additional tools."
  }
]